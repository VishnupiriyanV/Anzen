{
  "version": "1.131.0",
  "results": [
    {
      "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
      "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
      "start": {
        "line": 24,
        "col": 27,
        "offset": 493
      },
      "end": {
        "line": 24,
        "col": 79,
        "offset": 545
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 7,
              "offset": 6
            },
            "abstract_content": "SELECT"
          },
          "$EXPR": {
            "start": {
              "line": 24,
              "col": 28,
              "offset": 494
            },
            "end": {
              "line": 24,
              "col": 71,
              "offset": 537
            },
            "abstract_content": "SELECT * FROM `products` WHERE category = '"
          }
        },
        "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/SQL_Injection"
          ],
          "category": "security",
          "technology": [
            "php"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
          "shortlink": "https://sg.run/lZYG",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14757,
              "rule_id": "qNUXdL",
              "rv_id": 1039629,
              "url": "https://semgrep.dev/playground/r/7ZToWNO/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
              "version_id": "7ZToWNO"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "80f57547ace666f8ae6374c8ec115170c41ba18177ed72154b75d20478eac0f7dfe66967db440ff9b054eeb321bb9ef53a2ef22d680c93e533ef10a3c14ea76f_0",
        "lines": "$result = $mysqlDB->query(\"SELECT * FROM `products` WHERE category = '$query'\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 14,
                  "col": 34,
                  "offset": 261
                },
                "end": {
                  "line": 14,
                  "col": 39,
                  "offset": 266
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 14,
                  "col": 1,
                  "offset": 228
                },
                "end": {
                  "line": 14,
                  "col": 7,
                  "offset": 234
                }
              },
              "content": "$query"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 24,
                  "col": 27,
                  "offset": 493
                },
                "end": {
                  "line": 24,
                  "col": 79,
                  "offset": 545
                }
              },
              "\"SELECT * FROM `products` WHERE category = '$query'\""
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
      "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
      "start": {
        "line": 29,
        "col": 7,
        "offset": 691
      },
      "end": {
        "line": 32,
        "col": 39,
        "offset": 847
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "end": {
              "line": 1,
              "col": 6,
              "offset": 5
            },
            "abstract_content": "GET"
          },
          "$REQ": {
            "start": {
              "line": 14,
              "col": 34,
              "offset": 261
            },
            "end": {
              "line": 14,
              "col": 39,
              "offset": 266
            },
            "abstract_content": "$_GET"
          }
        },
        "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::sink::html-webpage::lang"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/language.basic-syntax.phptags.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
          "shortlink": "https://sg.run/RlGe",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27193,
              "rule_id": "r6UA0y",
              "rv_id": 947718,
              "url": "https://semgrep.dev/playground/r/ExTg4yR/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
              "version_id": "ExTg4yR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "979f439975a17df4521c9a600167b48efd484c4ed05460601816333662305a06a32e06d5b307fc71172b0bdc7a898f109c7ecca20f86fda9b06c0873c223d572_0",
        "lines": "      echo \"Id: \" . $row[\"id\"] . \"\\n\",\n      \"Stock: \" . $row[\"stock\"] . \"\\n\",\n      \"Category: \" .$row[\"category\"] . \"\\n\",\n      \"Color: \" .$row[\"color\"] . \"\\n\";",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 14,
                  "col": 34,
                  "offset": 261
                },
                "end": {
                  "line": 14,
                  "col": 44,
                  "offset": 271
                }
              },
              "$_GET['q']"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 14,
                  "col": 1,
                  "offset": 228
                },
                "end": {
                  "line": 14,
                  "col": 7,
                  "offset": 234
                }
              },
              "content": "$query"
            },
            {
              "location": {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 24,
                  "col": 27,
                  "offset": 493
                },
                "end": {
                  "line": 24,
                  "col": 28,
                  "offset": 494
                }
              },
              "content": "\""
            },
            {
              "location": {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 24,
                  "col": 1,
                  "offset": 467
                },
                "end": {
                  "line": 24,
                  "col": 8,
                  "offset": 474
                }
              },
              "content": "$result"
            },
            {
              "location": {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 28,
                  "col": 11,
                  "offset": 652
                },
                "end": {
                  "line": 28,
                  "col": 15,
                  "offset": 656
                }
              },
              "content": "$row"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 29,
                  "col": 7,
                  "offset": 691
                },
                "end": {
                  "line": 32,
                  "col": 39,
                  "offset": 847
                }
              },
              "echo \"Id: \" . $row[\"id\"] . \"\\n\",\n      \"Stock: \" . $row[\"stock\"] . \"\\n\",\n      \"Category: \" .$row[\"category\"] . \"\\n\",\n      \"Color: \" .$row[\"color\"] . \"\\n\";"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
      "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
      "start": {
        "line": 35,
        "col": 3,
        "offset": 865
      },
      "end": {
        "line": 35,
        "col": 31,
        "offset": 893
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "end": {
              "line": 1,
              "col": 6,
              "offset": 5
            },
            "abstract_content": "GET"
          },
          "$REQ": {
            "start": {
              "line": 14,
              "col": 34,
              "offset": 261
            },
            "end": {
              "line": 14,
              "col": 39,
              "offset": 266
            },
            "abstract_content": "$_GET"
          }
        },
        "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::sink::html-webpage::lang"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/language.basic-syntax.phptags.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
          "shortlink": "https://sg.run/RlGe",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27193,
              "rule_id": "r6UA0y",
              "rv_id": 947718,
              "url": "https://semgrep.dev/playground/r/ExTg4yR/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
              "version_id": "ExTg4yR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "979f439975a17df4521c9a600167b48efd484c4ed05460601816333662305a06a32e06d5b307fc71172b0bdc7a898f109c7ecca20f86fda9b06c0873c223d572_1",
        "lines": "  echo \"0 results for $query\";",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 14,
                  "col": 34,
                  "offset": 261
                },
                "end": {
                  "line": 14,
                  "col": 44,
                  "offset": 271
                }
              },
              "$_GET['q']"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 14,
                  "col": 1,
                  "offset": 228
                },
                "end": {
                  "line": 14,
                  "col": 7,
                  "offset": 234
                }
              },
              "content": "$query"
            },
            {
              "location": {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 35,
                  "col": 8,
                  "offset": 870
                },
                "end": {
                  "line": 35,
                  "col": 9,
                  "offset": 871
                }
              },
              "content": "\""
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/1-sqli-escape-invalid-blacklist-order.php",
                "start": {
                  "line": 35,
                  "col": 3,
                  "offset": 865
                },
                "end": {
                  "line": 35,
                  "col": 31,
                  "offset": 893
                }
              },
              "echo \"0 results for $query\";"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
      "path": "clonedf/11-cors-classic.js",
      "start": {
        "line": 5,
        "col": 7,
        "offset": 88
      },
      "end": {
        "line": 5,
        "col": 22,
        "offset": 103
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 5,
              "col": 7,
              "offset": 88
            },
            "end": {
              "line": 5,
              "col": 10,
              "offset": 91
            },
            "abstract_content": "app"
          },
          "$EXPRESS": {
            "start": {
              "line": 5,
              "col": 13,
              "offset": 94
            },
            "end": {
              "line": 5,
              "col": 20,
              "offset": 101
            },
            "abstract_content": "express",
            "propagated_value": {
              "svalue_start": {
                "line": 4,
                "col": 17,
                "offset": 62
              },
              "svalue_end": {
                "line": 4,
                "col": 35,
                "offset": 80
              },
              "svalue_abstract_content": "require('express')"
            }
          }
        },
        "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
        "metadata": {
          "category": "security",
          "references": [
            "https://www.npmjs.com/package/csurf",
            "https://www.npmjs.com/package/csrf",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
          ],
          "cwe": [
            "CWE-352: Cross-Site Request Forgery (CSRF)"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "technology": [
            "javascript",
            "typescript",
            "express"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site Request Forgery (CSRF)"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
          "shortlink": "https://sg.run/BxzR",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 22551,
              "rule_id": "wdUKEq",
              "rv_id": 945789,
              "url": "https://semgrep.dev/playground/r/NdTqkvB/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
              "version_id": "NdTqkvB"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "59d0054810b7f2d1915b0aa5959059163d592c926397fd09a7504990fe1e68d6bb92a021a130a4f9d74930fdec610136fdde995b3c8df60c4cbb9e906afc3313_0",
        "lines": "const app = express()",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.log.console-log-express.console-log-express",
      "path": "clonedf/11-cors-classic.js",
      "start": {
        "line": 37,
        "col": 5,
        "offset": 1013
      },
      "end": {
        "line": 37,
        "col": 87,
        "offset": 1095
      },
      "extra": {
        "metavars": {
          "$REQ": {
            "start": {
              "line": 37,
              "col": 37,
              "offset": 1045
            },
            "end": {
              "line": 37,
              "col": 40,
              "offset": 1048
            },
            "abstract_content": "req"
          }
        },
        "message": "Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-117: Improper Output Neutralization for Logs"
          ],
          "display-name": "Log Injection with Express",
          "functional-categories": [
            "log::sink::log::javascript",
            "web::source::cookie::express",
            "web::source::form-data::express",
            "web::source::header::express",
            "web::source::http-body::express",
            "web::source::url-path-params::express",
            "web::source::url-query-string::express"
          ],
          "owasp": [
            "A09:2021 - Security Logging and Monitoring Failures"
          ],
          "references": [
            "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"
          ],
          "technology": [
            "express",
            "web"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.express.log.console-log-express.console-log-express",
          "shortlink": "https://sg.run/pK7Ok",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 156118,
              "rule_id": "x8UKzE2",
              "rv_id": 1041972,
              "url": "https://semgrep.dev/playground/r/YDT2YlA/javascript.express.log.console-log-express.console-log-express",
              "version_id": "YDT2YlA"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "47651f558baf1f415aa019ff873ce4e33d44c1b76190305ca276716b4b95690458e0a2ba8a94a83af38caf8e539394d8eb69eb72c12769e7e66b78adac830c22_0",
        "lines": "    console.log(`[${Date()}][LOG]`, req.headers[\"referer\"], \"=>\", req.headers[\"host\"]);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/11-cors-classic.js",
                "start": {
                  "line": 37,
                  "col": 37,
                  "offset": 1045
                },
                "end": {
                  "line": 37,
                  "col": 40,
                  "offset": 1048
                }
              },
              "req"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/11-cors-classic.js",
                "start": {
                  "line": 37,
                  "col": 5,
                  "offset": 1013
                },
                "end": {
                  "line": 37,
                  "col": 87,
                  "offset": 1095
                }
              },
              "console.log(`[${Date()}][LOG]`, req.headers[\"referer\"], \"=>\", req.headers[\"host\"])"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "clonedf/11-cors-classic.js",
      "start": {
        "line": 37,
        "col": 17,
        "offset": 1025
      },
      "end": {
        "line": 37,
        "col": 34,
        "offset": 1042
      },
      "extra": {
        "metavars": {
          "$LOG": {
            "start": {
              "line": 37,
              "col": 13,
              "offset": 1021
            },
            "end": {
              "line": 37,
              "col": 16,
              "offset": 1024
            },
            "abstract_content": "log"
          },
          "$STR": {
            "start": {
              "line": 37,
              "col": 17,
              "offset": 1025
            },
            "end": {
              "line": 37,
              "col": 34,
              "offset": 1042
            },
            "abstract_content": "`[Date()][LOG]"
          },
          "$PARAM": {
            "start": {
              "line": 37,
              "col": 37,
              "offset": 1045
            },
            "end": {
              "line": 37,
              "col": 59,
              "offset": 1067
            },
            "abstract_content": "req.headers[\"referer\"]"
          }
        },
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13582,
              "rule_id": "ReU3OJ",
              "rv_id": 945885,
              "url": "https://semgrep.dev/playground/r/1QToKA3/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
              "version_id": "1QToKA3"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "063530067a9708c186cebdc1fa74b8f12d6ad1600c23c1fd17dc86ddfedd5c3b5be2e79548822fe789e2d8caefafcdfe93c36165c380da4554e385ffb3c97d4f_0",
        "lines": "    console.log(`[${Date()}][LOG]`, req.headers[\"referer\"], \"=>\", req.headers[\"host\"]);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/11-cors-classic.js",
                "start": {
                  "line": 37,
                  "col": 17,
                  "offset": 1025
                },
                "end": {
                  "line": 37,
                  "col": 34,
                  "offset": 1042
                }
              },
              "`[${Date()}][LOG]"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/11-cors-classic.js",
                "start": {
                  "line": 37,
                  "col": 17,
                  "offset": 1025
                },
                "end": {
                  "line": 37,
                  "col": 34,
                  "offset": 1042
                }
              },
              "`[${Date()}][LOG]"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.injection.path-traversal-open.path-traversal-open",
      "path": "clonedf/13-FileUpload_CodeInjection.py",
      "start": {
        "line": 19,
        "col": 12,
        "offset": 486
      },
      "end": {
        "line": 19,
        "col": 60,
        "offset": 534
      },
      "extra": {
        "metavars": {
          "$INTERM": {
            "start": {
              "line": 18,
              "col": 5,
              "offset": 402
            },
            "end": {
              "line": 18,
              "col": 12,
              "offset": 409
            },
            "abstract_content": "getFile"
          },
          "$W": {
            "start": {
              "line": 18,
              "col": 23,
              "offset": 420
            },
            "end": {
              "line": 18,
              "col": 27,
              "offset": 424
            },
            "abstract_content": "args"
          }
        },
        "message": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.",
        "metadata": {
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.injection.path-traversal-open.path-traversal-open",
          "shortlink": "https://sg.run/PJRW",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9545,
              "rule_id": "DbUpOQ",
              "rv_id": 946224,
              "url": "https://semgrep.dev/playground/r/YDTvR9R/python.flask.security.injection.path-traversal-open.path-traversal-open",
              "version_id": "YDTvR9R"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "87d33611a53acb3a45bb563b1037deeef143d1d04bb6b0e0470fcec62edd6df508474fcde53d4e0551b9093da0cd9ccb4af4af3a3efd1539979c874fc48b5637_0",
        "lines": "    file = open(app.config['UPLOAD_FOLDER'] + getFile, \"r\")",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask",
      "path": "clonedf/13-FileUpload_CodeInjection.py",
      "start": {
        "line": 19,
        "col": 17,
        "offset": 491
      },
      "end": {
        "line": 19,
        "col": 54,
        "offset": 528
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 5,
              "offset": 4
            },
            "abstract_content": "args"
          },
          "$PROPERTY": {
            "start": {
              "line": 18,
              "col": 23,
              "offset": 420
            },
            "end": {
              "line": 18,
              "col": 27,
              "offset": 424
            },
            "abstract_content": "args"
          },
          "$SINK": {
            "start": {
              "line": 19,
              "col": 17,
              "offset": 491
            },
            "end": {
              "line": 19,
              "col": 54,
              "offset": 528
            },
            "abstract_content": "app.config['UPLOAD_FOLDER']+getFile"
          }
        },
        "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.",
        "metadata": {
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "cwe2020-top25": true,
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "display-name": "Path Traversal with Flask",
          "functional-categories": [
            "file::sink::file-access::fileinput",
            "file::sink::file-access::io",
            "file::sink::file-access::linecache",
            "file::sink::file-access::os",
            "file::sink::file-access::shutil",
            "file::sink::file-access::stdlib",
            "file::sink::file-access::stdlib2",
            "file::sink::file-access::stdlib3",
            "file::sink::file-access::tempfile",
            "web::source::cookie::flask",
            "web::source::form-data::flask",
            "web::source::form-data::flask-wtf",
            "web::source::form-data::wtforms",
            "web::source::header::flask",
            "web::source::http-body::flask",
            "web::source::url-path-params::flask",
            "web::source::url-query-string::flask"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control",
            "A05:2017 - Broken Access Control"
          ],
          "references": [
            "https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/",
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control",
            "https://owasp.org/www-community/attacks/Path_Traversal",
            "https://portswigger.net/web-security/file-path-traversal",
            "https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"
          ],
          "technology": [
            "codecs",
            "fileaccess",
            "fileinput",
            "flask",
            "flask-wtf",
            "io",
            "linecache",
            "os",
            "shutil",
            "stdlib",
            "stdlib2",
            "stdlib3",
            "tempfile",
            "web",
            "wtforms"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask",
          "shortlink": "https://sg.run/6J4gW",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 116515,
              "rule_id": "2ZUzRLQ",
              "rv_id": 1042253,
              "url": "https://semgrep.dev/playground/r/nWTPn9A/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask",
              "version_id": "nWTPn9A"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "7b896065e9c3286f50bf26a7a56a48652e11821ecbf37013301ed34b387184fb85fce36e3287a4fd6bb9f5b700e7fc4afd9db056b35c25c56ba33e5f856deaa8_0",
        "lines": "    file = open(app.config['UPLOAD_FOLDER'] + getFile, \"r\")",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 18,
                  "col": 15,
                  "offset": 412
                },
                "end": {
                  "line": 18,
                  "col": 43,
                  "offset": 440
                }
              },
              "request.args.get(\"filename\")"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 18,
                  "col": 5,
                  "offset": 402
                },
                "end": {
                  "line": 18,
                  "col": 12,
                  "offset": 409
                }
              },
              "content": "getFile"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 19,
                  "col": 17,
                  "offset": 491
                },
                "end": {
                  "line": 19,
                  "col": 54,
                  "offset": 528
                }
              },
              "app.config['UPLOAD_FOLDER'] + getFile"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
      "path": "clonedf/13-FileUpload_CodeInjection.py",
      "start": {
        "line": 33,
        "col": 9,
        "offset": 840
      },
      "end": {
        "line": 35,
        "col": 84,
        "offset": 999
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 30,
              "col": 21,
              "offset": 752
            },
            "end": {
              "line": 30,
              "col": 26,
              "offset": 757
            },
            "abstract_content": "files"
          }
        },
        "message": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
          "shortlink": "https://sg.run/Zv6o",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9535,
              "rule_id": "QrUz49",
              "rv_id": 946207,
              "url": "https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
              "version_id": "gETe1NK"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "f167eb494402d851c715722a9c707ac57408ffa848aaf145fde9658f47e621ed6813d90fd28ddd0cc2b790ef98b1be407829116daf358e7b6e946fd9d460ce8b_0",
        "lines": "        return ('''<h2>File: succeeded!</h2><br>\n        <a href=\"/\">..Back</a><br>\n        <a href=\"./share?filename=%s\">See my file</a>''' % html.escape(f.filename))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 30,
                  "col": 13,
                  "offset": 744
                },
                "end": {
                  "line": 30,
                  "col": 34,
                  "offset": 765
                }
              },
              "request.files['file']"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 30,
                  "col": 9,
                  "offset": 740
                },
                "end": {
                  "line": 30,
                  "col": 10,
                  "offset": 741
                }
              },
              "content": "f"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 33,
                  "col": 9,
                  "offset": 840
                },
                "end": {
                  "line": 35,
                  "col": 83,
                  "offset": 998
                }
              },
              "return ('''<h2>File: succeeded!</h2><br>\n        <a href=\"/\">..Back</a><br>\n        <a href=\"./share?filename=%s\">See my file</a>''' % html.escape(f.filename)"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.django.security.injection.raw-html-format.raw-html-format",
      "path": "clonedf/13-FileUpload_CodeInjection.py",
      "start": {
        "line": 33,
        "col": 16,
        "offset": 847
      },
      "end": {
        "line": 35,
        "col": 84,
        "offset": 999
      },
      "extra": {
        "metavars": {
          "$ANYTHING": {
            "start": {
              "line": 30,
              "col": 21,
              "offset": 752
            },
            "end": {
              "line": 30,
              "col": 26,
              "offset": 757
            },
            "abstract_content": "files"
          },
          "$HTMLSTR": {
            "start": {
              "line": 33,
              "col": 20,
              "offset": 851
            },
            "end": {
              "line": 35,
              "col": 54,
              "offset": 969
            },
            "abstract_content": "<h2>File: succeeded!</h2><br>\n        <a href=\"/\">..Back</a><br>\n        <a href=\"./share?filename=%s\">See my file</a>"
          }
        },
        "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "django"
          ],
          "references": [
            "https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render",
            "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format",
          "shortlink": "https://sg.run/oYj1",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14360,
              "rule_id": "2ZUPER",
              "rv_id": 946179,
              "url": "https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format",
              "version_id": "l4Tx9Gr"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "5855a16d8ad877a2ed8720fc67418e7c012a27f076b89d1b92c190516d5685dd564993b4ad68c931975e3c8eec0235f3b88db42651dccc115da9d54fa497eebb_0",
        "lines": "        return ('''<h2>File: succeeded!</h2><br>\n        <a href=\"/\">..Back</a><br>\n        <a href=\"./share?filename=%s\">See my file</a>''' % html.escape(f.filename))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 30,
                  "col": 13,
                  "offset": 744
                },
                "end": {
                  "line": 30,
                  "col": 26,
                  "offset": 757
                }
              },
              "request.files"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 30,
                  "col": 9,
                  "offset": 740
                },
                "end": {
                  "line": 30,
                  "col": 10,
                  "offset": 741
                }
              },
              "content": "f"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 33,
                  "col": 17,
                  "offset": 848
                },
                "end": {
                  "line": 35,
                  "col": 83,
                  "offset": 998
                }
              },
              "'''<h2>File: succeeded!</h2><br>\n        <a href=\"/\">..Back</a><br>\n        <a href=\"./share?filename=%s\">See my file</a>''' % html.escape(f.filename)"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.injection.raw-html-concat.raw-html-format",
      "path": "clonedf/13-FileUpload_CodeInjection.py",
      "start": {
        "line": 33,
        "col": 16,
        "offset": 847
      },
      "end": {
        "line": 35,
        "col": 84,
        "offset": 999
      },
      "extra": {
        "metavars": {
          "$ANYTHING": {
            "start": {
              "line": 30,
              "col": 21,
              "offset": 752
            },
            "end": {
              "line": 30,
              "col": 26,
              "offset": 757
            },
            "abstract_content": "files"
          },
          "$HTMLSTR": {
            "start": {
              "line": 33,
              "col": 20,
              "offset": 851
            },
            "end": {
              "line": 35,
              "col": 54,
              "offset": 969
            },
            "abstract_content": "<h2>File: succeeded!</h2><br>\n        <a href=\"/\">..Back</a><br>\n        <a href=\"./share?filename=%s\">See my file</a>"
          }
        },
        "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format",
          "shortlink": "https://sg.run/Pb7e",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14389,
              "rule_id": "GdUrJv",
              "rv_id": 946225,
              "url": "https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format",
              "version_id": "6xTxjPq"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "e99d692d618a2deb23c79a805e903228fa6ee020504354e84008a9a540333a7cd1a4f2ea09ec8dd0cab96711397b4604574bc0f77136eb9328c2b886ec02e9a7_0",
        "lines": "        return ('''<h2>File: succeeded!</h2><br>\n        <a href=\"/\">..Back</a><br>\n        <a href=\"./share?filename=%s\">See my file</a>''' % html.escape(f.filename))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 30,
                  "col": 13,
                  "offset": 744
                },
                "end": {
                  "line": 30,
                  "col": 26,
                  "offset": 757
                }
              },
              "request.files"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 30,
                  "col": 9,
                  "offset": 740
                },
                "end": {
                  "line": 30,
                  "col": 10,
                  "offset": 741
                }
              },
              "content": "f"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/13-FileUpload_CodeInjection.py",
                "start": {
                  "line": 33,
                  "col": 17,
                  "offset": 848
                },
                "end": {
                  "line": 35,
                  "col": 83,
                  "offset": 998
                }
              },
              "'''<h2>File: succeeded!</h2><br>\n        <a href=\"/\">..Back</a><br>\n        <a href=\"./share?filename=%s\">See my file</a>''' % html.escape(f.filename)"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/13-FileUpload_CodeInjection.py",
      "start": {
        "line": 41,
        "col": 5,
        "offset": 1093
      },
      "end": {
        "line": 41,
        "col": 51,
        "offset": 1139
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "fcc8ec956a6ec21850e5e76e6f0a506c4200621e303e83af7bc34c88bbfeba5a00626a6e6214f4d27b5125217578faaad7f568b79eeeeda229333f7ad606851c_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/13-FileUpload_CodeInjection.py",
      "start": {
        "line": 41,
        "col": 5,
        "offset": 1093
      },
      "end": {
        "line": 41,
        "col": 51,
        "offset": 1139
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 41,
              "col": 5,
              "offset": 1093
            },
            "end": {
              "line": 41,
              "col": 8,
              "offset": 1096
            },
            "abstract_content": "app"
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "071b98f44533b27ba67c57810433864fd7beec6bd52b029ac32c7a96945094d6b4a66181318eae7babb53fb9f77714e710da512d8b86146de60356dc1ce5ceda_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
      "path": "clonedf/14-DoS-loop.php",
      "start": {
        "line": 38,
        "col": 5,
        "offset": 830
      },
      "end": {
        "line": 38,
        "col": 64,
        "offset": 889
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "end": {
              "line": 1,
              "col": 6,
              "offset": 5
            },
            "abstract_content": "GET"
          },
          "$REQ": {
            "start": {
              "line": 38,
              "col": 36,
              "offset": 861
            },
            "end": {
              "line": 38,
              "col": 41,
              "offset": 866
            },
            "abstract_content": "$_GET"
          }
        },
        "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::sink::html-webpage::lang"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/language.basic-syntax.phptags.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
          "shortlink": "https://sg.run/RlGe",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27193,
              "rule_id": "r6UA0y",
              "rv_id": 947718,
              "url": "https://semgrep.dev/playground/r/ExTg4yR/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
              "version_id": "ExTg4yR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "4135a780e4d334292e453cadc0c5b86d7f0c0336009145919c08879c3b5492f4ca89fc15b043a5a10ad30c7b28ae0086577f8a9b7ece66d62166b5babe2b32db_0",
        "lines": "    echo \"Your link: \", InviteLink($_GET['from'], $_GET['to']);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/14-DoS-loop.php",
                "start": {
                  "line": 38,
                  "col": 36,
                  "offset": 861
                },
                "end": {
                  "line": 38,
                  "col": 49,
                  "offset": 874
                }
              },
              "$_GET['from']"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/14-DoS-loop.php",
                "start": {
                  "line": 38,
                  "col": 5,
                  "offset": 830
                },
                "end": {
                  "line": 38,
                  "col": 64,
                  "offset": 889
                }
              },
              "echo \"Your link: \", InviteLink($_GET['from'], $_GET['to']);"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.insecure-deserialization.insecure-deserialization",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 41,
        "col": 20,
        "offset": 889
      },
      "end": {
        "line": 41,
        "col": 38,
        "offset": 907
      },
      "extra": {
        "metavars": {
          "$X": {
            "start": {
              "line": 31,
              "col": 5,
              "offset": 610
            },
            "end": {
              "line": 31,
              "col": 10,
              "offset": 615
            },
            "abstract_content": "index"
          },
          "$FUNC": {
            "start": {
              "line": 41,
              "col": 27,
              "offset": 896
            },
            "end": {
              "line": 41,
              "col": 32,
              "offset": 901
            },
            "abstract_content": "loads"
          }
        },
        "message": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization",
          "shortlink": "https://sg.run/N45z",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9527,
              "rule_id": "d8UjBO",
              "rv_id": 946232,
              "url": "https://semgrep.dev/playground/r/1QToKqY/python.flask.security.insecure-deserialization.insecure-deserialization",
              "version_id": "1QToKqY"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "ceefde71284aaa9b720f4fd132832ee1b0f96d7bb102b3cb81446733c550893265d9adb4e84503f2de73e7d411da5890d5f8c40bf11e7260cdde133ae49136d1_0",
        "lines": "            data = pickle.loads(data)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 41,
        "col": 20,
        "offset": 889
      },
      "end": {
        "line": 41,
        "col": 38,
        "offset": 907
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 41,
              "col": 27,
              "offset": 896
            },
            "end": {
              "line": 41,
              "col": 32,
              "offset": 901
            },
            "abstract_content": "loads"
          }
        },
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9675,
              "rule_id": "EwU2BJ",
              "rv_id": 946397,
              "url": "https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle",
              "version_id": "w8TKJL9"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "c11d46a7a76ef5d31b9064019700dd90d0a75559b521a3a1bfa930b818a62202968cf8270433d1a19ca6c45ef7c3c3081cda0deae564a7d98627cc8fe1f4ae61_0",
        "lines": "            data = pickle.loads(data)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 41,
        "col": 33,
        "offset": 902
      },
      "end": {
        "line": 41,
        "col": 37,
        "offset": 906
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 6,
              "offset": 5
            },
            "abstract_content": "loads"
          },
          "$PROPERTY": {
            "start": {
              "line": 35,
              "col": 26,
              "offset": 703
            },
            "end": {
              "line": 35,
              "col": 33,
              "offset": 710
            },
            "abstract_content": "cookies"
          },
          "$PICKLE": {
            "start": {
              "line": 41,
              "col": 20,
              "offset": 889
            },
            "end": {
              "line": 41,
              "col": 26,
              "offset": 895
            },
            "abstract_content": "pickle"
          },
          "$METHOD": {
            "start": {
              "line": 41,
              "col": 27,
              "offset": 896
            },
            "end": {
              "line": 41,
              "col": 32,
              "offset": 901
            },
            "abstract_content": "loads"
          },
          "$SINK": {
            "start": {
              "line": 41,
              "col": 33,
              "offset": 902
            },
            "end": {
              "line": 41,
              "col": 37,
              "offset": 906
            },
            "abstract_content": "data",
            "propagated_value": {
              "svalue_start": {
                "line": 40,
                "col": 20,
                "offset": 828
              },
              "svalue_end": {
                "line": 40,
                "col": 61,
                "offset": 869
              },
              "svalue_abstract_content": "b64.b64decode(bytes(dataCookie'UTF-8'))"
            }
          }
        },
        "message": "The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are also considered insecure.",
        "metadata": {
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "cwe2020-top25": true,
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "display-name": "Unsafe Deserialization in Flask",
          "functional-categories": [
            "deserialization::sink::load-object::lang",
            "web::source::cookie::flask",
            "web::source::form-data::flask",
            "web::source::form-data::flask-wtf",
            "web::source::form-data::wtforms",
            "web::source::header::flask",
            "web::source::http-body::flask",
            "web::source::url-path-params::flask",
            "web::source::url-query-string::flask"
          ],
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "references": [
            "https://davidhamann.de/2020/04/05/exploiting-python-pickle/",
            "https://docs.python.org/3/library/pickle.html",
            "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures",
            "https://portswigger.net/web-security/deserialization"
          ],
          "technology": [
            "deserialization",
            "flask",
            "flask-wtf",
            "pickle",
            "web",
            "wtforms"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask",
          "shortlink": "https://sg.run/3lBg",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 44943,
              "rule_id": "qNUAQe",
              "rv_id": 1042245,
              "url": "https://semgrep.dev/playground/r/kbTxOD3/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask",
              "version_id": "kbTxOD3"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "d15982341543964f7eeab7f1ac09812c847325f0bee26907752eabe245021c72d9b2c55fa282eb3e9fdd18a29e254423abec2f3aadb9e2ddbd41cac909886ceb_0",
        "lines": "            data = pickle.loads(data)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/17-deserialization-classic.py",
                "start": {
                  "line": 35,
                  "col": 18,
                  "offset": 695
                },
                "end": {
                  "line": 35,
                  "col": 49,
                  "offset": 726
                }
              },
              "request.cookies.get('userData')"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/17-deserialization-classic.py",
                "start": {
                  "line": 35,
                  "col": 5,
                  "offset": 682
                },
                "end": {
                  "line": 35,
                  "col": 15,
                  "offset": 692
                }
              },
              "content": "dataCookie"
            },
            {
              "location": {
                "path": "clonedf/17-deserialization-classic.py",
                "start": {
                  "line": 40,
                  "col": 13,
                  "offset": 821
                },
                "end": {
                  "line": 40,
                  "col": 17,
                  "offset": 825
                }
              },
              "content": "data"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/17-deserialization-classic.py",
                "start": {
                  "line": 41,
                  "col": 33,
                  "offset": 902
                },
                "end": {
                  "line": 41,
                  "col": 37,
                  "offset": 906
                }
              },
              "data"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.secure-set-cookie.secure-set-cookie",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 51,
        "col": 9,
        "offset": 1270
      },
      "end": {
        "line": 51,
        "col": 60,
        "offset": 1321
      },
      "extra": {
        "metavars": {
          "$RESP": {
            "start": {
              "line": 51,
              "col": 9,
              "offset": 1270
            },
            "end": {
              "line": 51,
              "col": 13,
              "offset": 1274
            },
            "abstract_content": "resp",
            "propagated_value": {
              "svalue_start": {
                "line": 32,
                "col": 12,
                "offset": 630
              },
              "svalue_end": {
                "line": 32,
                "col": 22,
                "offset": 640
              },
              "svalue_abstract_content": "Response()"
            }
          }
        },
        "message": "Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration.",
        "metadata": {
          "cwe": [
            "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "references": [
            "https://flask.palletsprojects.com/en/3.0.x/api/#flask.Response.set_cookie",
            "https://flask.palletsprojects.com/en/3.0.x/security/#set-cookie-options"
          ],
          "category": "security",
          "technology": [
            "python",
            "flask"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "functional-categories": [
            "web::search::cookie-config::flask"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cookie Security"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.secure-set-cookie.secure-set-cookie",
          "shortlink": "https://sg.run/gLkZ",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9541,
              "rule_id": "GdU7GR",
              "rv_id": 946215,
              "url": "https://semgrep.dev/playground/r/RGTAgj5/python.flask.security.audit.secure-set-cookie.secure-set-cookie",
              "version_id": "RGTAgj5"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "8fff0776ec697c2ef2b3f74c8641c528b9fefed4e2c18ab11546561e4c5eb892ace27ebdefb422bff7129acad377e294c588c1c938a7f028cc1b3c923c7b1c56_0",
        "lines": "        resp.set_cookie('userData', b64.b64encode(newData))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.web.flask-cookie-httponly-missing.flask-cookie-httponly-missing",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 51,
        "col": 9,
        "offset": 1270
      },
      "end": {
        "line": 51,
        "col": 60,
        "offset": 1321
      },
      "extra": {
        "metavars": {
          "$RESP": {
            "start": {
              "line": 51,
              "col": 9,
              "offset": 1270
            },
            "end": {
              "line": 51,
              "col": 13,
              "offset": 1274
            },
            "abstract_content": "resp",
            "propagated_value": {
              "svalue_start": {
                "line": 32,
                "col": 12,
                "offset": 630
              },
              "svalue_end": {
                "line": 32,
                "col": 22,
                "offset": 640
              },
              "svalue_abstract_content": "Response()"
            }
          },
          "$...ARGS": {
            "start": {
              "line": 51,
              "col": 25,
              "offset": 1286
            },
            "end": {
              "line": 51,
              "col": 59,
              "offset": 1320
            },
            "abstract_content": "'userData'b64.b64encode(newData)"
          }
        },
        "message": "Detected a cookie where the `HttpOnly` flag is either missing or disabled. The `HttpOnly` cookie flag instructs the browser to forbid client-side JavaScript to read the cookie. If JavaScript interaction is required, you can ignore this finding. However, set the `HttpOnly` flag to `true` in all other cases. If this wasn't intentional, it's recommended to set the HttpOnly flag to true so the cookie will not be accessible through client-side scripts. A secure default approach would consist of creating a custom response class, overriding the `set_cookie` method to set this flag to `True` by default, setting the `response_class` attribute of your Flask app to use the custom response class, setting the flag to False on a case-by-case basis only when necessary.",
        "fix": "resp.set_cookie('userData', b64.b64encode(newData), httponly=True)",
        "metadata": {
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "secure default"
          ],
          "cwe": [
            "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
          ],
          "display-name": "Missing HttpOnly Flag in Cookie",
          "functional-categories": [
            "web::search::cookie-config::flask",
            "web::search::cookie-config::flask-jwt-extended",
            "web::search::cookie-config::flask-login",
            "web::search::cookie-config::flask-session"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
          ],
          "technology": [
            "cookie",
            "cookies",
            "flask",
            "web"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cookie Security"
          ],
          "source": "https://semgrep.dev/r/python.flask.web.flask-cookie-httponly-missing.flask-cookie-httponly-missing",
          "shortlink": "https://sg.run/x8Z4j",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 116530,
              "rule_id": "d8Ur84L",
              "rv_id": 947962,
              "url": "https://semgrep.dev/playground/r/ZRT3q8v/python.flask.web.flask-cookie-httponly-missing.flask-cookie-httponly-missing",
              "version_id": "ZRT3q8v"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "9653df04fdf4549506fdce28fd05042b2dcc4bd41a14f53313616f3f5d1df034e2d7d760f221c99887ef70c5760f8b3bd6bbcd75a9ee952f7d4558495de29026_0",
        "lines": "        resp.set_cookie('userData', b64.b64encode(newData))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.web.flask-cookie-samesite-missing.flask-cookie-samesite-missing",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 51,
        "col": 9,
        "offset": 1270
      },
      "end": {
        "line": 51,
        "col": 60,
        "offset": 1321
      },
      "extra": {
        "metavars": {
          "$RESP": {
            "start": {
              "line": 51,
              "col": 9,
              "offset": 1270
            },
            "end": {
              "line": 51,
              "col": 13,
              "offset": 1274
            },
            "abstract_content": "resp",
            "propagated_value": {
              "svalue_start": {
                "line": 32,
                "col": 12,
                "offset": 630
              },
              "svalue_end": {
                "line": 32,
                "col": 22,
                "offset": 640
              },
              "svalue_abstract_content": "Response()"
            }
          },
          "$...ARGS": {
            "start": {
              "line": 51,
              "col": 25,
              "offset": 1286
            },
            "end": {
              "line": 51,
              "col": 59,
              "offset": 1320
            },
            "abstract_content": "'userData'b64.b64encode(newData)"
          }
        },
        "message": "Detected a cookie options with the `SameSite` flag set to \"None\". This is a potential security risk that arises from the way web browsers manage cookies. In a typical web application, cookies are used to store and transmit session-related data between a client and a server. To enhance security, cookies can be marked with the \"SameSite\" attribute, which restricts their usage based on the origin of the page that set them. This attribute can have three values: \"Strict,\" \"Lax,\" or \"None\". Make sure that the choice of the `None` value is intentional and that you understand the potential security implications. When `SameSite` is set to \"Strict\", no 3rd party cookie will be sent with outgoing requests. While 'Strict' is the most secure option, 'Lax' is a good compromise between security and usability and this default value is secure for most applications. A secure default approach would consist of creating a custom response class, overriding the `set_cookie` method to set this flag to `Lax` by default, setting the `response_class` attribute of your Flask app to use the custom response class, setting the flag a different value on a case-by-case basis only when necessary.",
        "fix": "resp.set_cookie('userData', b64.b64encode(newData), samesite='Lax')",
        "metadata": {
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "secure default"
          ],
          "cwe": [
            "CWE-1275: Sensitive Cookie with Improper SameSite Attribute"
          ],
          "display-name": "Improper SameSite Attribute in Cookie",
          "functional-categories": [
            "web::search::cookie-config::flask",
            "web::search::cookie-config::flask-jwt-extended",
            "web::search::cookie-config::flask-login",
            "web::search::cookie-config::flask-session"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control",
            "https://web.dev/articles/samesite-cookies-explained"
          ],
          "technology": [
            "cookie",
            "cookies",
            "flask",
            "web"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cookie Security"
          ],
          "source": "https://semgrep.dev/r/python.flask.web.flask-cookie-samesite-missing.flask-cookie-samesite-missing",
          "shortlink": "https://sg.run/Orzy7",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 116531,
              "rule_id": "ZqUQDGX",
              "rv_id": 947963,
              "url": "https://semgrep.dev/playground/r/nWTpYEb/python.flask.web.flask-cookie-samesite-missing.flask-cookie-samesite-missing",
              "version_id": "nWTpYEb"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "7cea7b13ccc1dff2138d6cd0668ddc69a718e9dcdfa9f29ca15c215addddd682f540de95e7f4c9e1ae0d7d5f9ebcce85a4fc2b6cf6584fd7fd3c84b0051cbbda_0",
        "lines": "        resp.set_cookie('userData', b64.b64encode(newData))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.web.flask-cookie-secure-missing.flask-cookie-secure-missing",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 51,
        "col": 9,
        "offset": 1270
      },
      "end": {
        "line": 51,
        "col": 60,
        "offset": 1321
      },
      "extra": {
        "metavars": {
          "$RESP": {
            "start": {
              "line": 51,
              "col": 9,
              "offset": 1270
            },
            "end": {
              "line": 51,
              "col": 13,
              "offset": 1274
            },
            "abstract_content": "resp",
            "propagated_value": {
              "svalue_start": {
                "line": 32,
                "col": 12,
                "offset": 630
              },
              "svalue_end": {
                "line": 32,
                "col": 22,
                "offset": 640
              },
              "svalue_abstract_content": "Response()"
            }
          },
          "$...ARGS": {
            "start": {
              "line": 51,
              "col": 25,
              "offset": 1286
            },
            "end": {
              "line": 51,
              "col": 59,
              "offset": 1320
            },
            "abstract_content": "'userData'b64.b64encode(newData)"
          }
        },
        "message": "Detected a cookie where the `Secure` flag is either missing or disabled. The `Secure` cookie flag instructs the browser to forbid sending the cookie over an insecure HTTP request. Set the `Secure` flag to `true` so the cookie will only be sent over HTTPS. If this wasn't intentional, it's recommended to set the Secure flag to true so the cookie will always be sent over HTTPS. A secure default approach would consist of creating a custom response class, overriding the `set_cookie` method to set this flag to `True` by default, setting the `response_class` attribute of your Flask app to use the custom response class, setting the flag to False on a case-by-case basis only when necessary.",
        "fix": "resp.set_cookie('userData', b64.b64encode(newData), secure=True)",
        "metadata": {
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "secure default"
          ],
          "cwe": [
            "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
          ],
          "display-name": "Cookie Without 'Secure' Attribute in flask",
          "functional-categories": [
            "web::search::cookie-config::flask",
            "web::search::cookie-config::flask-jwt-extended",
            "web::search::cookie-config::flask-login",
            "web::search::cookie-config::flask-session"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration"
          ],
          "technology": [
            "cookie",
            "cookies",
            "flask",
            "web"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cookie Security"
          ],
          "source": "https://semgrep.dev/r/python.flask.web.flask-cookie-secure-missing.flask-cookie-secure-missing",
          "shortlink": "https://sg.run/d8O1n",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 116534,
              "rule_id": "7KUgKWw",
              "rv_id": 947966,
              "url": "https://semgrep.dev/playground/r/LjTX4nZ/python.flask.web.flask-cookie-secure-missing.flask-cookie-secure-missing",
              "version_id": "LjTX4nZ"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "1cdb5ef04deda8b19186b0a7ebcb5ee33a2e8175aab48f241523d66a5d92f833ed79012bb2fa251b9dc5489f27cf24ad67b1fc9d1057855a4e84905a66486ca7_0",
        "lines": "        resp.set_cookie('userData', b64.b64encode(newData))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.debug.debug-flask.active-debug-code-flask",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 56,
        "col": 5,
        "offset": 1383
      },
      "end": {
        "line": 56,
        "col": 51,
        "offset": 1429
      },
      "extra": {
        "metavars": {},
        "message": "The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "display-name": "Active Debug Code in Flask",
          "functional-categories": [
            "debug::search::active-debug-code"
          ],
          "references": [
            "https://flask.palletsprojects.com/en/3.0.x/debugging/"
          ],
          "technology": [
            "flask",
            "python"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask",
          "shortlink": "https://sg.run/lBbpB",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 116513,
              "rule_id": "zdUKBnK",
              "rv_id": 947918,
              "url": "https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask",
              "version_id": "ZRT3q9v"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "12823d9c4303fc5582156d540251b8cd574f61ea33689c0c35759218f59b164cdcb0009cc8d1e9bf62d0431a345970148ec472707aab6ec137fd7ff212c336b8_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 56,
        "col": 5,
        "offset": 1383
      },
      "end": {
        "line": 56,
        "col": 51,
        "offset": 1429
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "a5cedf5cc6ec9cb2993ce6c2ba4c957e96a176e9b9faa1e8694c0f0b98c01f92a9862268a931d5d080fa207a77b3b7d336494c6cd7c23a31aee705b707d50fab_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/17-deserialization-classic.py",
      "start": {
        "line": 56,
        "col": 5,
        "offset": 1383
      },
      "end": {
        "line": 56,
        "col": 51,
        "offset": 1429
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 56,
              "col": 5,
              "offset": 1383
            },
            "end": {
              "line": 56,
              "col": 8,
              "offset": 1386
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 11,
                "col": 7,
                "offset": 192
              },
              "svalue_end": {
                "line": 11,
                "col": 22,
                "offset": 207
              },
              "svalue_abstract_content": "Flask(__name__)"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "fadb99986e5255f9d849d830ec4d8e8b4341a6428d0986d451ae024046bac7e9d05e9e8ada5210f76b24f8159434791af50520dbb78502a884d8a1cb5f567d8a_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.injection.tainted-filename.tainted-filename",
      "path": "clonedf/18-pathTraversal-improper-regex.php",
      "start": {
        "line": 30,
        "col": 35,
        "offset": 741
      },
      "end": {
        "line": 30,
        "col": 40,
        "offset": 746
      },
      "extra": {
        "metavars": {
          "$FILENAME": {
            "start": {
              "line": 30,
              "col": 35,
              "offset": 741
            },
            "end": {
              "line": 30,
              "col": 40,
              "offset": 746
            },
            "abstract_content": "$file",
            "propagated_value": {
              "svalue_start": {
                "line": 29,
                "col": 14,
                "offset": 660
              },
              "svalue_end": {
                "line": 29,
                "col": 59,
                "offset": 705
              },
              "svalue_abstract_content": "htmlspecialchars(PathFilter($_GET['file']))"
            }
          }
        },
        "message": "File name based on user input risks server-side request forgery.",
        "metadata": {
          "technology": [
            "php"
          ],
          "category": "security",
          "cwe": [
            "CWE-918: Server-Side Request Forgery (SSRF)"
          ],
          "owasp": [
            "A10:2021 - Server-Side Request Forgery (SSRF)"
          ],
          "references": [
            "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "impact": "MEDIUM",
          "likelihood": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Server-Side Request Forgery (SSRF)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename",
          "shortlink": "https://sg.run/Ayqp",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 16250,
              "rule_id": "5rUpro",
              "rv_id": 945999,
              "url": "https://semgrep.dev/playground/r/ZRT359j/php.lang.security.injection.tainted-filename.tainted-filename",
              "version_id": "ZRT359j"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "0c23818d4e384a8249122f276ab14999eefa3faa2bd3d3ae6fa0cb9b7242bf0dd73e82c5147c638fe221766a5b0a4287fda20901c8f0ed096803e0c680c89ce7_0",
        "lines": "    $content = file_get_contents( $file );",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/18-pathTraversal-improper-regex.php",
                "start": {
                  "line": 29,
                  "col": 43,
                  "offset": 689
                },
                "end": {
                  "line": 29,
                  "col": 48,
                  "offset": 694
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/18-pathTraversal-improper-regex.php",
                "start": {
                  "line": 29,
                  "col": 5,
                  "offset": 651
                },
                "end": {
                  "line": 29,
                  "col": 10,
                  "offset": 656
                }
              },
              "content": "$file"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/18-pathTraversal-improper-regex.php",
                "start": {
                  "line": 30,
                  "col": 35,
                  "offset": 741
                },
                "end": {
                  "line": 30,
                  "col": 40,
                  "offset": 746
                }
              },
              "$file"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.django.security.injection.raw-html-format.raw-html-format",
      "path": "clonedf/2-ssrf-regex-bypass.py",
      "start": {
        "line": 36,
        "col": 13,
        "offset": 930
      },
      "end": {
        "line": 38,
        "col": 56,
        "offset": 1024
      },
      "extra": {
        "metavars": {
          "$ANYTHING": {
            "start": {
              "line": 33,
              "col": 37,
              "offset": 840
            },
            "end": {
              "line": 33,
              "col": 41,
              "offset": 844
            },
            "abstract_content": "args"
          },
          "$HTMLSTR": {
            "start": {
              "line": 36,
              "col": 17,
              "offset": 934
            },
            "end": {
              "line": 38,
              "col": 41,
              "offset": 1009
            },
            "abstract_content": "\n    <h1>Here is your image!!</h1>\n    <img src=\"data:image/jpg;base64,%s\">"
          }
        },
        "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "django"
          ],
          "references": [
            "https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render",
            "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format",
          "shortlink": "https://sg.run/oYj1",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14360,
              "rule_id": "2ZUPER",
              "rv_id": 946179,
              "url": "https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format",
              "version_id": "l4Tx9Gr"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "9caad4b9eda25e718f407190ab8d9a7b4f302c54d05be962235629207ab4754ee35cd30db519f60fc3f3136c54961b97d512e34baafdcbd04bbe81661dacc178_0",
        "lines": "    image = ('''\n    <h1>Here is your image!!</h1>\n    <img src=\"data:image/jpg;base64,%s\">''' % imageB64)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/2-ssrf-regex-bypass.py",
                "start": {
                  "line": 33,
                  "col": 29,
                  "offset": 832
                },
                "end": {
                  "line": 33,
                  "col": 41,
                  "offset": 844
                }
              },
              "request.args"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/2-ssrf-regex-bypass.py",
                "start": {
                  "line": 33,
                  "col": 5,
                  "offset": 808
                },
                "end": {
                  "line": 33,
                  "col": 13,
                  "offset": 816
                }
              },
              "content": "imageURL"
            },
            {
              "location": {
                "path": "clonedf/2-ssrf-regex-bypass.py",
                "start": {
                  "line": 35,
                  "col": 5,
                  "offset": 864
                },
                "end": {
                  "line": 35,
                  "col": 13,
                  "offset": 872
                }
              },
              "content": "imageB64"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/2-ssrf-regex-bypass.py",
                "start": {
                  "line": 36,
                  "col": 14,
                  "offset": 931
                },
                "end": {
                  "line": 38,
                  "col": 55,
                  "offset": 1023
                }
              },
              "'''\n    <h1>Here is your image!!</h1>\n    <img src=\"data:image/jpg;base64,%s\">''' % imageB64"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.injection.raw-html-concat.raw-html-format",
      "path": "clonedf/2-ssrf-regex-bypass.py",
      "start": {
        "line": 36,
        "col": 13,
        "offset": 930
      },
      "end": {
        "line": 38,
        "col": 56,
        "offset": 1024
      },
      "extra": {
        "metavars": {
          "$ANYTHING": {
            "start": {
              "line": 33,
              "col": 37,
              "offset": 840
            },
            "end": {
              "line": 33,
              "col": 41,
              "offset": 844
            },
            "abstract_content": "args"
          },
          "$HTMLSTR": {
            "start": {
              "line": 36,
              "col": 17,
              "offset": 934
            },
            "end": {
              "line": 38,
              "col": 41,
              "offset": 1009
            },
            "abstract_content": "\n    <h1>Here is your image!!</h1>\n    <img src=\"data:image/jpg;base64,%s\">"
          }
        },
        "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format",
          "shortlink": "https://sg.run/Pb7e",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14389,
              "rule_id": "GdUrJv",
              "rv_id": 946225,
              "url": "https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format",
              "version_id": "6xTxjPq"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "ab6d727c1641abef26b380df37d63469cb4f7871bbce4e6976c1b8da13921191c36bbfd9dc88e2faf945f3c9d92dc8edf993ae5abf80fb9917cfb73753ef8048_0",
        "lines": "    image = ('''\n    <h1>Here is your image!!</h1>\n    <img src=\"data:image/jpg;base64,%s\">''' % imageB64)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/2-ssrf-regex-bypass.py",
                "start": {
                  "line": 33,
                  "col": 29,
                  "offset": 832
                },
                "end": {
                  "line": 33,
                  "col": 41,
                  "offset": 844
                }
              },
              "request.args"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/2-ssrf-regex-bypass.py",
                "start": {
                  "line": 33,
                  "col": 5,
                  "offset": 808
                },
                "end": {
                  "line": 33,
                  "col": 13,
                  "offset": 816
                }
              },
              "content": "imageURL"
            },
            {
              "location": {
                "path": "clonedf/2-ssrf-regex-bypass.py",
                "start": {
                  "line": 35,
                  "col": 5,
                  "offset": 864
                },
                "end": {
                  "line": 35,
                  "col": 13,
                  "offset": 872
                }
              },
              "content": "imageB64"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/2-ssrf-regex-bypass.py",
                "start": {
                  "line": 36,
                  "col": 14,
                  "offset": 931
                },
                "end": {
                  "line": 38,
                  "col": 55,
                  "offset": 1023
                }
              },
              "'''\n    <h1>Here is your image!!</h1>\n    <img src=\"data:image/jpg;base64,%s\">''' % imageB64"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/2-ssrf-regex-bypass.py",
      "start": {
        "line": 43,
        "col": 5,
        "offset": 1113
      },
      "end": {
        "line": 43,
        "col": 51,
        "offset": 1159
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "c4b11cda0542cc91386ad020bdc6621c0b76300edb215b172459e9e11b2b45f978d132f7434ed0d0dcbd12ef3cdd4b586baeb654f393090e6b8caf4b76764f7e_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/2-ssrf-regex-bypass.py",
      "start": {
        "line": 43,
        "col": 5,
        "offset": 1113
      },
      "end": {
        "line": 43,
        "col": 51,
        "offset": 1159
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 43,
              "col": 5,
              "offset": 1113
            },
            "end": {
              "line": 43,
              "col": 8,
              "offset": 1116
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 5,
                "col": 7,
                "offset": 136
              },
              "svalue_end": {
                "line": 5,
                "col": 90,
                "offset": 219
              },
              "svalue_abstract_content": "design.Design(Flask(__name__)__file__'Vsnippet #32 - Format injection classic')"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "51ab286b8a25913e5754bfb3b4fe43e7c708506beab20e9f5b79698e742dcb7d4602b38861388e02fa49d64e49c949f1dfb7baa834e92db750de246b8f1b5c4b_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
      "path": "clonedf/20-sqli-login.js",
      "start": {
        "line": 10,
        "col": 7,
        "offset": 236
      },
      "end": {
        "line": 10,
        "col": 22,
        "offset": 251
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 10,
              "col": 7,
              "offset": 236
            },
            "end": {
              "line": 10,
              "col": 10,
              "offset": 239
            },
            "abstract_content": "app"
          },
          "$EXPRESS": {
            "start": {
              "line": 10,
              "col": 13,
              "offset": 242
            },
            "end": {
              "line": 10,
              "col": 20,
              "offset": 249
            },
            "abstract_content": "express",
            "propagated_value": {
              "svalue_start": {
                "line": 6,
                "col": 17,
                "offset": 104
              },
              "svalue_end": {
                "line": 6,
                "col": 35,
                "offset": 122
              },
              "svalue_abstract_content": "require('express')"
            }
          }
        },
        "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
        "metadata": {
          "category": "security",
          "references": [
            "https://www.npmjs.com/package/csurf",
            "https://www.npmjs.com/package/csrf",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
          ],
          "cwe": [
            "CWE-352: Cross-Site Request Forgery (CSRF)"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "technology": [
            "javascript",
            "typescript",
            "express"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site Request Forgery (CSRF)"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
          "shortlink": "https://sg.run/BxzR",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 22551,
              "rule_id": "wdUKEq",
              "rv_id": 945789,
              "url": "https://semgrep.dev/playground/r/NdTqkvB/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
              "version_id": "NdTqkvB"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "5f12f028b57afadff2ed3a2722e88e9a0cffc72f55a93426e325e076ad53e207df1f22e36318e84d4c1a35e43ced190629dc3a0628ef92c4fa7ffdf7884e233f_0",
        "lines": "const app = express()",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization",
      "path": "clonedf/20-sqli-login.js",
      "start": {
        "line": 20,
        "col": 22,
        "offset": 474
      },
      "end": {
        "line": 20,
        "col": 56,
        "offset": 508
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 2,
              "offset": 1
            },
            "end": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "abstract_content": "\""
          },
          "$STR": {
            "start": {
              "line": 20,
              "col": 22,
              "offset": 474
            },
            "end": {
              "line": 20,
              "col": 39,
              "offset": 491
            },
            "abstract_content": "req.body.username"
          },
          "$CHAR": {
            "start": {
              "line": 20,
              "col": 48,
              "offset": 500
            },
            "end": {
              "line": 20,
              "col": 51,
              "offset": 503
            },
            "abstract_content": "'\"'"
          }
        },
        "message": "`req.body.username.replace` method will only replace the first occurrence when used with a string argument ('\"'). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.",
        "metadata": {
          "cwe": [
            "CWE-116: Improper Encoding or Escaping of Output"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Encoding"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization",
          "shortlink": "https://sg.run/1GbQ",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13466,
              "rule_id": "d8UlRq",
              "rv_id": 945873,
              "url": "https://semgrep.dev/playground/r/0bT15RE/javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization",
              "version_id": "0bT15RE"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "8ddf5026855470b2a6dee44f4855f02aa347c222a2f361bcd8b79af4041eeeb3a090e0361a092f37d68b9704bba144b70378920805f50d77c26b5d56ec40af4d_0",
        "lines": "    const username = req.body.username.replace('\"', '');",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "cpp.lang.security.strings.unbounded-copy-to-stack-buffer.unbounded-copy-to-stack-buffer",
      "path": "clonedf/23-bof-classic.c",
      "start": {
        "line": 22,
        "col": 9,
        "offset": 354
      },
      "end": {
        "line": 22,
        "col": 13,
        "offset": 358
      },
      "extra": {
        "metavars": {
          "$TY": {
            "start": {
              "line": 17,
              "col": 5,
              "offset": 218
            },
            "end": {
              "line": 17,
              "col": 9,
              "offset": 222
            },
            "abstract_content": "char"
          },
          "$SIZE": {
            "start": {
              "line": 17,
              "col": 17,
              "offset": 230
            },
            "end": {
              "line": 17,
              "col": 18,
              "offset": 231
            },
            "abstract_content": "4"
          },
          "$FUN": {
            "start": {
              "line": 22,
              "col": 9,
              "offset": 354
            },
            "end": {
              "line": 22,
              "col": 13,
              "offset": 358
            },
            "abstract_content": "gets"
          },
          "$BUF": {
            "start": {
              "line": 22,
              "col": 14,
              "offset": 359
            },
            "end": {
              "line": 22,
              "col": 20,
              "offset": 365
            },
            "abstract_content": "tryOTP"
          }
        },
        "message": "The function `gets` does not impose any size limitation to what it writes to `tryOTP`. That may lead to a stack buffer overflow if there is no validation on the size of the input.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cert": [
            "C",
            "C++",
            "L1",
            "STR31-C"
          ],
          "cwe": [
            "CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')"
          ],
          "display-name": "Buffer Overflow",
          "functional-categories": [
            "memory::sink::buffer-overflow"
          ],
          "references": [
            "https://wiki.sei.cmu.edu/confluence/display/c/STR31-C.+Guarantee+that+storage+for+strings+has+sufficient+space+for+character+data+and+the+null+terminator"
          ],
          "technology": [
            "cpp"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/cpp.lang.security.strings.unbounded-copy-to-stack-buffer.unbounded-copy-to-stack-buffer",
          "shortlink": "https://sg.run/GdYYy",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 114892,
              "rule_id": "qNU2OOW",
              "rv_id": 947259,
              "url": "https://semgrep.dev/playground/r/LjTX4QW/cpp.lang.security.strings.unbounded-copy-to-stack-buffer.unbounded-copy-to-stack-buffer",
              "version_id": "LjTX4QW"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "efb46bc0607f312419fc0f1f93c10c3f588a89539a20e07cd233b7944b5c4b11e066199e987a771085989ef926e217c21884e229bd3667dfe9a3be78f0a88366_0",
        "lines": "        gets(tryOTP);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn",
      "path": "clonedf/23-bof-classic.c",
      "start": {
        "line": 22,
        "col": 9,
        "offset": 354
      },
      "end": {
        "line": 22,
        "col": 21,
        "offset": 366
      },
      "extra": {
        "metavars": {},
        "message": "Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.",
        "metadata": {
          "cwe": [
            "CWE-676: Use of Potentially Dangerous Function"
          ],
          "references": [
            "https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s"
          ],
          "category": "security",
          "technology": [
            "c"
          ],
          "confidence": "MEDIUM",
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Dangerous Method or Function"
          ],
          "source": "https://semgrep.dev/r/c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn",
          "shortlink": "https://sg.run/dKqX",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 8834,
              "rule_id": "GdU7OE",
              "rv_id": 945170,
              "url": "https://semgrep.dev/playground/r/YDTvRlQ/c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn",
              "version_id": "YDTvRlQ"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "dce26586613347808e2a2af8f780a78fb1afd80fd31788034e471bf294dfff79818667fd984f7494793ba2b2db9449ea29b9cac97965ed1370da05be45edd566_0",
        "lines": "        gets(tryOTP);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
      "path": "clonedf/24-sqli-column.php",
      "start": {
        "line": 49,
        "col": 8,
        "offset": 1130
      },
      "end": {
        "line": 49,
        "col": 77,
        "offset": 1199
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 7,
              "offset": 6
            },
            "abstract_content": "SELECT"
          },
          "$EXPR": {
            "start": {
              "line": 49,
              "col": 9,
              "offset": 1131
            },
            "end": {
              "line": 49,
              "col": 17,
              "offset": 1139
            },
            "abstract_content": "SELECT `"
          }
        },
        "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/SQL_Injection"
          ],
          "category": "security",
          "technology": [
            "php"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
          "shortlink": "https://sg.run/lZYG",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14757,
              "rule_id": "qNUXdL",
              "rv_id": 1039629,
              "url": "https://semgrep.dev/playground/r/7ZToWNO/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
              "version_id": "7ZToWNO"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "f51dddeab1b1e3e79c801530f07653c011ae7158486f4525f81a318f69785ff503a7b7f258b0bb9506243384ada5a55492d0f4cee2690c87f2432c781d9204a4_0",
        "lines": "$SQL = \"SELECT `$column` FROM `products` WHERE stock > 0 AND size = '$size'\";",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/24-sqli-column.php",
                "start": {
                  "line": 41,
                  "col": 47,
                  "offset": 951
                },
                "end": {
                  "line": 41,
                  "col": 52,
                  "offset": 956
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/24-sqli-column.php",
                "start": {
                  "line": 41,
                  "col": 1,
                  "offset": 905
                },
                "end": {
                  "line": 41,
                  "col": 6,
                  "offset": 910
                }
              },
              "content": "$size"
            },
            {
              "location": {
                "path": "clonedf/24-sqli-column.php",
                "start": {
                  "line": 41,
                  "col": 1,
                  "offset": 905
                },
                "end": {
                  "line": 41,
                  "col": 6,
                  "offset": 910
                }
              },
              "content": "$size"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/24-sqli-column.php",
                "start": {
                  "line": 49,
                  "col": 8,
                  "offset": 1130
                },
                "end": {
                  "line": 49,
                  "col": 77,
                  "offset": 1199
                }
              },
              "\"SELECT `$column` FROM `products` WHERE stock > 0 AND size = '$size'\""
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
      "path": "clonedf/25-xss-csp-bypass.php",
      "start": {
        "line": 27,
        "col": 4,
        "offset": 510
      },
      "end": {
        "line": 27,
        "col": 77,
        "offset": 583
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "end": {
              "line": 1,
              "col": 6,
              "offset": 5
            },
            "abstract_content": "GET"
          },
          "$REQ": {
            "start": {
              "line": 27,
              "col": 38,
              "offset": 544
            },
            "end": {
              "line": 27,
              "col": 43,
              "offset": 549
            },
            "abstract_content": "$_GET"
          }
        },
        "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::sink::html-webpage::lang"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/language.basic-syntax.phptags.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
          "shortlink": "https://sg.run/RlGe",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27193,
              "rule_id": "r6UA0y",
              "rv_id": 947718,
              "url": "https://semgrep.dev/playground/r/ExTg4yR/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
              "version_id": "ExTg4yR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "a95b3bbb77f612d474d1b54d46acc1ae3c62603f11f4440b37c3881a8bac36d847eb831ca26b971c1c0562f003071a80f24aa4f735e7a78573a098de757dc459_0",
        "lines": "<p><?= ( isset($_GET[\"message\"]) ) ? $_GET[\"message\"] : 'session expired' ?></p>",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/25-xss-csp-bypass.php",
                "start": {
                  "line": 27,
                  "col": 38,
                  "offset": 544
                },
                "end": {
                  "line": 27,
                  "col": 54,
                  "offset": 560
                }
              },
              "$_GET[\"message\"]"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/25-xss-csp-bypass.php",
                "start": {
                  "line": 27,
                  "col": 4,
                  "offset": 510
                },
                "end": {
                  "line": 27,
                  "col": 77,
                  "offset": 583
                }
              },
              "<?= ( isset($_GET[\"message\"]) ) ? $_GET[\"message\"] : 'session expired' ?>"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.debug.debug-flask.active-debug-code-flask",
      "path": "clonedf/26-idor-rest-api.py",
      "start": {
        "line": 41,
        "col": 5,
        "offset": 787
      },
      "end": {
        "line": 41,
        "col": 51,
        "offset": 833
      },
      "extra": {
        "metavars": {},
        "message": "The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "display-name": "Active Debug Code in Flask",
          "functional-categories": [
            "debug::search::active-debug-code"
          ],
          "references": [
            "https://flask.palletsprojects.com/en/3.0.x/debugging/"
          ],
          "technology": [
            "flask",
            "python"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask",
          "shortlink": "https://sg.run/lBbpB",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 116513,
              "rule_id": "zdUKBnK",
              "rv_id": 947918,
              "url": "https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask",
              "version_id": "ZRT3q9v"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "516cd9f2d8e4873986a6d148134bec52287f60d914216052fb050ceea602c3ed78ed4947010ecb13699a92af8f4f941b2408f4dbfc07da5e6b1f09c2d67a8d7d_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/26-idor-rest-api.py",
      "start": {
        "line": 41,
        "col": 5,
        "offset": 787
      },
      "end": {
        "line": 41,
        "col": 51,
        "offset": 833
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "3116d88e1c0925f5e363f396995d9aa11ee59119a6a24ed145342342ed6a2d3a97c942ac3e1038f55908dbe20d1206a08b21216cf02d64eefa678a40fb293096_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/26-idor-rest-api.py",
      "start": {
        "line": 41,
        "col": 5,
        "offset": 787
      },
      "end": {
        "line": 41,
        "col": 51,
        "offset": 833
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 41,
              "col": 5,
              "offset": 787
            },
            "end": {
              "line": 41,
              "col": 8,
              "offset": 790
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 9,
                "col": 7,
                "offset": 135
              },
              "svalue_end": {
                "line": 9,
                "col": 22,
                "offset": 150
              },
              "svalue_abstract_content": "Flask(__name__)"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "44d160aef925282d154e452bfbed805282022eb4daff993f1b6f23d9a1dbb8584ba40ceab3dbabf9f6023ce89e072cddd23eeb1c957e7e4ce51f997761deae3d_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
      "path": "clonedf/26-pathTraversal-replace-limit.php",
      "start": {
        "line": 41,
        "col": 1,
        "offset": 769
      },
      "end": {
        "line": 41,
        "col": 43,
        "offset": 811
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "end": {
              "line": 1,
              "col": 6,
              "offset": 5
            },
            "abstract_content": "GET"
          },
          "$REQ": {
            "start": {
              "line": 37,
              "col": 13,
              "offset": 649
            },
            "end": {
              "line": 37,
              "col": 18,
              "offset": 654
            },
            "abstract_content": "$_GET"
          }
        },
        "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::sink::html-webpage::lang"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/language.basic-syntax.phptags.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
          "shortlink": "https://sg.run/RlGe",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27193,
              "rule_id": "r6UA0y",
              "rv_id": 947718,
              "url": "https://semgrep.dev/playground/r/ExTg4yR/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
              "version_id": "ExTg4yR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "d42eb8f9b0100c8fe3e902065df93aebfc7c0d014bde5b37b50c18d1b54d67d557672e9d67715016db528100c417db3d90175c137313cab5670dc3d669ecab4a_0",
        "lines": "echo file_get_contents(\"./account/$page\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/26-pathTraversal-replace-limit.php",
                "start": {
                  "line": 37,
                  "col": 13,
                  "offset": 649
                },
                "end": {
                  "line": 37,
                  "col": 26,
                  "offset": 662
                }
              },
              "$_GET[\"page\"]"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/26-pathTraversal-replace-limit.php",
                "start": {
                  "line": 37,
                  "col": 5,
                  "offset": 641
                },
                "end": {
                  "line": 37,
                  "col": 10,
                  "offset": 646
                }
              },
              "content": "$page"
            },
            {
              "location": {
                "path": "clonedf/26-pathTraversal-replace-limit.php",
                "start": {
                  "line": 41,
                  "col": 24,
                  "offset": 792
                },
                "end": {
                  "line": 41,
                  "col": 25,
                  "offset": 793
                }
              },
              "content": "\""
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/26-pathTraversal-replace-limit.php",
                "start": {
                  "line": 41,
                  "col": 1,
                  "offset": 769
                },
                "end": {
                  "line": 41,
                  "col": 43,
                  "offset": 811
                }
              },
              "echo file_get_contents(\"./account/$page\");"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.injection.tainted-filename.tainted-filename",
      "path": "clonedf/26-pathTraversal-replace-limit.php",
      "start": {
        "line": 41,
        "col": 24,
        "offset": 792
      },
      "end": {
        "line": 41,
        "col": 41,
        "offset": 809
      },
      "extra": {
        "metavars": {
          "$FILENAME": {
            "start": {
              "line": 41,
              "col": 24,
              "offset": 792
            },
            "end": {
              "line": 41,
              "col": 41,
              "offset": 809
            },
            "abstract_content": "\"\"./account/$page\""
          }
        },
        "message": "File name based on user input risks server-side request forgery.",
        "metadata": {
          "technology": [
            "php"
          ],
          "category": "security",
          "cwe": [
            "CWE-918: Server-Side Request Forgery (SSRF)"
          ],
          "owasp": [
            "A10:2021 - Server-Side Request Forgery (SSRF)"
          ],
          "references": [
            "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "impact": "MEDIUM",
          "likelihood": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Server-Side Request Forgery (SSRF)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename",
          "shortlink": "https://sg.run/Ayqp",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 16250,
              "rule_id": "5rUpro",
              "rv_id": 945999,
              "url": "https://semgrep.dev/playground/r/ZRT359j/php.lang.security.injection.tainted-filename.tainted-filename",
              "version_id": "ZRT359j"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "480ef23bbbc7b9780a12f259aeda40c6582bc036297c486113882f66e0a1c26734e0cfa0e688e1ad22641f551f9269b182524b65bd16119afe2571cb2cd58f91_0",
        "lines": "echo file_get_contents(\"./account/$page\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/26-pathTraversal-replace-limit.php",
                "start": {
                  "line": 37,
                  "col": 13,
                  "offset": 649
                },
                "end": {
                  "line": 37,
                  "col": 18,
                  "offset": 654
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/26-pathTraversal-replace-limit.php",
                "start": {
                  "line": 37,
                  "col": 5,
                  "offset": 641
                },
                "end": {
                  "line": 37,
                  "col": 10,
                  "offset": 646
                }
              },
              "content": "$page"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/26-pathTraversal-replace-limit.php",
                "start": {
                  "line": 41,
                  "col": 24,
                  "offset": 792
                },
                "end": {
                  "line": 41,
                  "col": 41,
                  "offset": 809
                }
              },
              "\"./account/$page\""
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.django.security.injection.raw-html-format.raw-html-format",
      "path": "clonedf/27-cache-poisoning-classic.py",
      "start": {
        "line": 23,
        "col": 19,
        "offset": 506
      },
      "end": {
        "line": 28,
        "col": 79,
        "offset": 719
      },
      "extra": {
        "metavars": {
          "$HTMLSTR": {
            "start": {
              "line": 23,
              "col": 22,
              "offset": 509
            },
            "end": {
              "line": 28,
              "col": 5,
              "offset": 645
            },
            "abstract_content": "\n    <div id=\"cache_info\">\n      <p> The page was cached at: [%s] </p>\n      <p> The user was redirected from: [%s] </p>\n    </div>\n    "
          },
          "$TAG": {
            "start": {
              "line": 24,
              "col": 6,
              "offset": 515
            },
            "end": {
              "line": 24,
              "col": 9,
              "offset": 518
            },
            "abstract_content": "div"
          },
          "$ANYTHING": {
            "start": {
              "line": 28,
              "col": 55,
              "offset": 695
            },
            "end": {
              "line": 28,
              "col": 62,
              "offset": 702
            },
            "abstract_content": "headers"
          }
        },
        "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "django"
          ],
          "references": [
            "https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render",
            "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format",
          "shortlink": "https://sg.run/oYj1",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14360,
              "rule_id": "2ZUPER",
              "rv_id": 946179,
              "url": "https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format",
              "version_id": "l4Tx9Gr"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "a5de4bb18e6cedb13c4ec52fb1a59ff9c157d9e6f9a2b6582850f24e6745a3cb4a0272719698df12672fc73467f62bced636936652c4441a3d56d88d42586e22_0",
        "lines": "    HTMLContent = '''\n    <div id=\"cache_info\">\n      <p> The page was cached at: [%s] </p>\n      <p> The user was redirected from: [%s] </p>\n    </div>\n    ''' %  (str(datetime.datetime.now()), str(request.headers.get(\"Referer\")))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/27-cache-poisoning-classic.py",
                "start": {
                  "line": 28,
                  "col": 47,
                  "offset": 687
                },
                "end": {
                  "line": 28,
                  "col": 62,
                  "offset": 702
                }
              },
              "request.headers"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/27-cache-poisoning-classic.py",
                "start": {
                  "line": 23,
                  "col": 19,
                  "offset": 506
                },
                "end": {
                  "line": 28,
                  "col": 79,
                  "offset": 719
                }
              },
              "'''\n    <div id=\"cache_info\">\n      <p> The page was cached at: [%s] </p>\n      <p> The user was redirected from: [%s] </p>\n    </div>\n    ''' %  (str(datetime.datetime.now()), str(request.headers.get(\"Referer\")))"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.injection.raw-html-concat.raw-html-format",
      "path": "clonedf/27-cache-poisoning-classic.py",
      "start": {
        "line": 23,
        "col": 19,
        "offset": 506
      },
      "end": {
        "line": 28,
        "col": 79,
        "offset": 719
      },
      "extra": {
        "metavars": {
          "$HTMLSTR": {
            "start": {
              "line": 23,
              "col": 22,
              "offset": 509
            },
            "end": {
              "line": 28,
              "col": 5,
              "offset": 645
            },
            "abstract_content": "\n    <div id=\"cache_info\">\n      <p> The page was cached at: [%s] </p>\n      <p> The user was redirected from: [%s] </p>\n    </div>\n    "
          },
          "$TAG": {
            "start": {
              "line": 24,
              "col": 6,
              "offset": 515
            },
            "end": {
              "line": 24,
              "col": 9,
              "offset": 518
            },
            "abstract_content": "div"
          },
          "$ANYTHING": {
            "start": {
              "line": 28,
              "col": 55,
              "offset": 695
            },
            "end": {
              "line": 28,
              "col": 62,
              "offset": 702
            },
            "abstract_content": "headers"
          }
        },
        "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format",
          "shortlink": "https://sg.run/Pb7e",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14389,
              "rule_id": "GdUrJv",
              "rv_id": 946225,
              "url": "https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format",
              "version_id": "6xTxjPq"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "3748e7f5399dec3f225245bb2d7de6a5ee2e5dadcae801a1111039a8e714f6a2983a4f1aec0f73795b4faf31dc31642e18ad9bbc65cc2ca8d837325b06d5409e_0",
        "lines": "    HTMLContent = '''\n    <div id=\"cache_info\">\n      <p> The page was cached at: [%s] </p>\n      <p> The user was redirected from: [%s] </p>\n    </div>\n    ''' %  (str(datetime.datetime.now()), str(request.headers.get(\"Referer\")))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/27-cache-poisoning-classic.py",
                "start": {
                  "line": 28,
                  "col": 47,
                  "offset": 687
                },
                "end": {
                  "line": 28,
                  "col": 62,
                  "offset": 702
                }
              },
              "request.headers"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/27-cache-poisoning-classic.py",
                "start": {
                  "line": 23,
                  "col": 19,
                  "offset": 506
                },
                "end": {
                  "line": 28,
                  "col": 79,
                  "offset": 719
                }
              },
              "'''\n    <div id=\"cache_info\">\n      <p> The page was cached at: [%s] </p>\n      <p> The user was redirected from: [%s] </p>\n    </div>\n    ''' %  (str(datetime.datetime.now()), str(request.headers.get(\"Referer\")))"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/27-cache-poisoning-classic.py",
      "start": {
        "line": 33,
        "col": 5,
        "offset": 818
      },
      "end": {
        "line": 33,
        "col": 51,
        "offset": 864
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "d7f32c2aa7d118446259923c370b3d1732849acf564b1ae58d46f4b4afab5098eb69d63d57713b168f07718b12b1a8eaae2f13012492c8a91fb7107a82c90b8f_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/27-cache-poisoning-classic.py",
      "start": {
        "line": 33,
        "col": 5,
        "offset": 818
      },
      "end": {
        "line": 33,
        "col": 51,
        "offset": 864
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 33,
              "col": 5,
              "offset": 818
            },
            "end": {
              "line": 33,
              "col": 8,
              "offset": 821
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 6,
                "col": 7,
                "offset": 156
              },
              "svalue_end": {
                "line": 6,
                "col": 89,
                "offset": 238
              },
              "svalue_abstract_content": "design.Design(Flask(__name__)__file__'Vsnippet #27 - Cache poisoning classic')"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "7a1259eb28173563001de91c08ec6b25de65fe4cd1344065dc0abc3ad43c43766c079848f43204e50c4a6712b669449b7690a66dde8b9f93a5354ee1d8b95d47_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.django.security.injection.raw-html-format.raw-html-format",
      "path": "clonedf/28-business-logic-money-transfer.py",
      "start": {
        "line": 41,
        "col": 23,
        "offset": 1142
      },
      "end": {
        "line": 41,
        "col": 111,
        "offset": 1230
      },
      "extra": {
        "metavars": {
          "$ANYTHING": {
            "start": {
              "line": 35,
              "col": 24,
              "offset": 918
            },
            "end": {
              "line": 35,
              "col": 28,
              "offset": 922
            },
            "abstract_content": "args"
          },
          "$HTMLSTR": {
            "start": {
              "line": 41,
              "col": 25,
              "offset": 1144
            },
            "end": {
              "line": 41,
              "col": 66,
              "offset": 1185
            },
            "abstract_content": "<b style=\"color:lightgreen\">You withdraw "
          }
        },
        "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "django"
          ],
          "references": [
            "https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render",
            "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format",
          "shortlink": "https://sg.run/oYj1",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14360,
              "rule_id": "2ZUPER",
              "rv_id": 946179,
              "url": "https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format",
              "version_id": "l4Tx9Gr"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "db068e0771ccde8fb67da6df24b24fe30b63a0aa439e5dd59ece411ce0d25a115718df7a59054bdeae5bf7dfecd762ad63a591240b34df99a7838b1fc5c0c919_0",
        "lines": "            message = f'<b style=\"color:lightgreen\">You withdraw {user.Currency} : {str(withdrawAmount)}</b>!'",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/28-business-logic-money-transfer.py",
                "start": {
                  "line": 35,
                  "col": 16,
                  "offset": 910
                },
                "end": {
                  "line": 35,
                  "col": 28,
                  "offset": 922
                }
              },
              "request.args"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/28-business-logic-money-transfer.py",
                "start": {
                  "line": 35,
                  "col": 5,
                  "offset": 899
                },
                "end": {
                  "line": 35,
                  "col": 13,
                  "offset": 907
                }
              },
              "content": "paramURL"
            },
            {
              "location": {
                "path": "clonedf/28-business-logic-money-transfer.py",
                "start": {
                  "line": 38,
                  "col": 9,
                  "offset": 957
                },
                "end": {
                  "line": 38,
                  "col": 23,
                  "offset": 971
                }
              },
              "content": "withdrawAmount"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/28-business-logic-money-transfer.py",
                "start": {
                  "line": 41,
                  "col": 23,
                  "offset": 1142
                },
                "end": {
                  "line": 41,
                  "col": 111,
                  "offset": 1230
                }
              },
              "f'<b style=\"color:lightgreen\">You withdraw {user.Currency} : {str(withdrawAmount)}</b>!'"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.injection.raw-html-concat.raw-html-format",
      "path": "clonedf/28-business-logic-money-transfer.py",
      "start": {
        "line": 41,
        "col": 23,
        "offset": 1142
      },
      "end": {
        "line": 41,
        "col": 111,
        "offset": 1230
      },
      "extra": {
        "metavars": {
          "$ANYTHING": {
            "start": {
              "line": 35,
              "col": 24,
              "offset": 918
            },
            "end": {
              "line": 35,
              "col": 28,
              "offset": 922
            },
            "abstract_content": "args"
          },
          "$HTMLSTR": {
            "start": {
              "line": 41,
              "col": 25,
              "offset": 1144
            },
            "end": {
              "line": 41,
              "col": 66,
              "offset": 1185
            },
            "abstract_content": "<b style=\"color:lightgreen\">You withdraw "
          }
        },
        "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format",
          "shortlink": "https://sg.run/Pb7e",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14389,
              "rule_id": "GdUrJv",
              "rv_id": 946225,
              "url": "https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format",
              "version_id": "6xTxjPq"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "e48fcbb9e8d01389f6670c3298bf81669202fdc0a0d38e69c33b36de3e2fca1b50f31cc50b6e97cb931a4689c6b0f545ca5d9346b64bd0d4ed84126322eac840_0",
        "lines": "            message = f'<b style=\"color:lightgreen\">You withdraw {user.Currency} : {str(withdrawAmount)}</b>!'",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/28-business-logic-money-transfer.py",
                "start": {
                  "line": 35,
                  "col": 16,
                  "offset": 910
                },
                "end": {
                  "line": 35,
                  "col": 28,
                  "offset": 922
                }
              },
              "request.args"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/28-business-logic-money-transfer.py",
                "start": {
                  "line": 35,
                  "col": 5,
                  "offset": 899
                },
                "end": {
                  "line": 35,
                  "col": 13,
                  "offset": 907
                }
              },
              "content": "paramURL"
            },
            {
              "location": {
                "path": "clonedf/28-business-logic-money-transfer.py",
                "start": {
                  "line": 38,
                  "col": 9,
                  "offset": 957
                },
                "end": {
                  "line": 38,
                  "col": 23,
                  "offset": 971
                }
              },
              "content": "withdrawAmount"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/28-business-logic-money-transfer.py",
                "start": {
                  "line": 41,
                  "col": 23,
                  "offset": 1142
                },
                "end": {
                  "line": 41,
                  "col": 111,
                  "offset": 1230
                }
              },
              "f'<b style=\"color:lightgreen\">You withdraw {user.Currency} : {str(withdrawAmount)}</b>!'"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/28-business-logic-money-transfer.py",
      "start": {
        "line": 54,
        "col": 5,
        "offset": 1521
      },
      "end": {
        "line": 54,
        "col": 51,
        "offset": 1567
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "4e8cdc8b6be39fb683884070e61465cb223be6c52f7b5305681977eb0be0d54cbbf5907ce5f04fb634341bbbb38188d87f31c5576adfd178da059f580bb87e51_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/28-business-logic-money-transfer.py",
      "start": {
        "line": 54,
        "col": 5,
        "offset": 1521
      },
      "end": {
        "line": 54,
        "col": 51,
        "offset": 1567
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 54,
              "col": 5,
              "offset": 1521
            },
            "end": {
              "line": 54,
              "col": 8,
              "offset": 1524
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 4,
                "col": 7,
                "offset": 108
              },
              "svalue_end": {
                "line": 4,
                "col": 95,
                "offset": 196
              },
              "svalue_abstract_content": "design.Design(Flask(__name__)__file__'Vsnippet #28 - Business logic money transfer')"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "cad55519c56bad7f43d1a9384fe3323cc4b529e8be9afb1f0e1c6ccfa39c8227d26b643f26c7a3602bfde31ec89df3b09b82d2e4fa9b6d17964c02b9abf4f856_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.tainted-path-traversal.tainted-path-traversal",
      "path": "clonedf/3-LFI-log-injection.php",
      "start": {
        "line": 43,
        "col": 1,
        "offset": 901
      },
      "end": {
        "line": 43,
        "col": 49,
        "offset": 949
      },
      "extra": {
        "metavars": {},
        "message": "Detected user input going into a php include or require command, which can lead to path traversal and sensitive data being exposed. These commands can also lead to code execution. Instead, allowlist files that the user can access or rigorously validate user input.",
        "metadata": {
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-23: Relative Path Traversal"
          ],
          "functional-categories": [
            "web::source::cookie::lang",
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::source::url-path-params::lang",
            "file::sink::file-access::lang"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://medium.com/@emmapinheiro42/php-include-ignore-4a3ba81371af",
            "https://www.acunetix.com/websitesecurity/php-security-2/"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.tainted-path-traversal.tainted-path-traversal",
          "shortlink": "https://sg.run/WGrg",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27197,
              "rule_id": "wdUR68",
              "rv_id": 947722,
              "url": "https://semgrep.dev/playground/r/gETeWvY/php.lang.security.tainted-path-traversal.tainted-path-traversal",
              "version_id": "gETeWvY"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "30e43953acd13c00069556424763058ccad0975d1e09ced01c73066da8db25a5faded4ae07b2ea5d521a4524ce5154dfaeb526fff019833c0fc1e0be68f940c7_0",
        "lines": "include(OSPath(\"home/\" . IncludeFilter($lang)));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/3-LFI-log-injection.php",
                "start": {
                  "line": 40,
                  "col": 36,
                  "offset": 862
                },
                "end": {
                  "line": 40,
                  "col": 41,
                  "offset": 867
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/3-LFI-log-injection.php",
                "start": {
                  "line": 40,
                  "col": 1,
                  "offset": 827
                },
                "end": {
                  "line": 40,
                  "col": 6,
                  "offset": 832
                }
              },
              "content": "$lang"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/3-LFI-log-injection.php",
                "start": {
                  "line": 43,
                  "col": 1,
                  "offset": 901
                },
                "end": {
                  "line": 43,
                  "col": 49,
                  "offset": 949
                }
              },
              "include(OSPath(\"home/\" . IncludeFilter($lang)));"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.laravel.security.laravel-path-traversal.laravel-path-traversal",
      "path": "clonedf/3-LFI-log-injection.php",
      "start": {
        "line": 43,
        "col": 9,
        "offset": 909
      },
      "end": {
        "line": 43,
        "col": 47,
        "offset": 947
      },
      "extra": {
        "metavars": {
          "$FILE": {
            "start": {
              "line": 43,
              "col": 9,
              "offset": 909
            },
            "end": {
              "line": 43,
              "col": 47,
              "offset": 947
            },
            "abstract_content": "OSPath(\"home/\".IncludeFilter($lang))"
          }
        },
        "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In PHP, this can lead to both local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "functional-categories": [
            "web::source::cookie::lang",
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::source::header::lang",
            "web::source::url-path-params::lang",
            "web::source::form-data::lang",
            "web::source::cookie::laravel",
            "web::source::http-params::laravel",
            "web::source::http-body::laravel",
            "web::source::header::laravel",
            "web::source::url-path-params::laravel",
            "web::source::form-data::laravel",
            "file::sink::file-access::laravel",
            "file::sink::file-access::lang"
          ],
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "references": [
            "https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md#path-traversal"
          ],
          "technology": [
            "laravel"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/php.laravel.security.laravel-path-traversal.laravel-path-traversal",
          "shortlink": "https://sg.run/5v1K",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 36491,
              "rule_id": "OrUBb8",
              "rv_id": 947740,
              "url": "https://semgrep.dev/playground/r/6xTxq47/php.laravel.security.laravel-path-traversal.laravel-path-traversal",
              "version_id": "6xTxq47"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "7f78cf860fc27eb3881a06a13630c96d179f9c4c662f5d8209aba86951a9bb1859bfad3b52c8eb7b53c00a79a22a5d4bb323842cd8f83eb2ccc93b9367ba7d3e_0",
        "lines": "include(OSPath(\"home/\" . IncludeFilter($lang)));",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/3-LFI-log-injection.php",
                "start": {
                  "line": 40,
                  "col": 36,
                  "offset": 862
                },
                "end": {
                  "line": 40,
                  "col": 41,
                  "offset": 867
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/3-LFI-log-injection.php",
                "start": {
                  "line": 40,
                  "col": 1,
                  "offset": 827
                },
                "end": {
                  "line": 40,
                  "col": 6,
                  "offset": 832
                }
              },
              "content": "$lang"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/3-LFI-log-injection.php",
                "start": {
                  "line": 43,
                  "col": 9,
                  "offset": 909
                },
                "end": {
                  "line": 43,
                  "col": 47,
                  "offset": 947
                }
              },
              "OSPath(\"home/\" . IncludeFilter($lang))"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.exec-use.exec-use",
      "path": "clonedf/30-deserialization-wakeup.php",
      "start": {
        "line": 22,
        "col": 9,
        "offset": 498
      },
      "end": {
        "line": 22,
        "col": 56,
        "offset": 545
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 22,
              "col": 17,
              "offset": 506
            },
            "end": {
              "line": 22,
              "col": 21,
              "offset": 510
            },
            "abstract_content": "exec"
          }
        },
        "message": "Executing non-constant commands. This can lead to command injection.",
        "metadata": {
          "cwe": [
            "CWE-94: Improper Control of Generation of Code ('Code Injection')"
          ],
          "references": [
            "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"
          ],
          "category": "security",
          "technology": [
            "php"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Code Injection"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use",
          "shortlink": "https://sg.run/5Q1j",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9391,
              "rule_id": "qNUjye",
              "rv_id": 945992,
              "url": "https://semgrep.dev/playground/r/kbTYkBG/php.lang.security.exec-use.exec-use",
              "version_id": "kbTYkBG"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "a50edeff41d75b767f5ff0673e66b77e8d9570326efb3db8e5f9be8d6f7116f920099a4f7a8704d5207ade8aa84b2fd697ab24ae1c5fe03137114b85e15ac0ba_0",
        "lines": "        $data = exec(\"ping -c 4 -W 5 -n \" . $this->ip);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.unserialize-use.unserialize-use",
      "path": "clonedf/30-deserialization-wakeup.php",
      "start": {
        "line": 33,
        "col": 5,
        "offset": 865
      },
      "end": {
        "line": 33,
        "col": 30,
        "offset": 890
      },
      "extra": {
        "metavars": {},
        "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).",
        "metadata": {
          "references": [
            "https://www.php.net/manual/en/function.unserialize.php",
            "https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization.html"
          ],
          "category": "security",
          "technology": [
            "php"
          ],
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/php.lang.security.unserialize-use.unserialize-use",
          "shortlink": "https://sg.run/b24E",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13970,
              "rule_id": "v8U9OJ",
              "rv_id": 946016,
              "url": "https://semgrep.dev/playground/r/DkTNpgw/php.lang.security.unserialize-use.unserialize-use",
              "version_id": "DkTNpgw"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "9ea21bef2371c4cac577236591b349b7176f17fe39c8834a50734ce77baae17c5b7cc1396ee920f0049413eee01abf1a4042720b96706194f82c5d82c9765a7b_0",
        "lines": "    unserialize($client_data);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/32-format-injection-classic.py",
      "start": {
        "line": 33,
        "col": 5,
        "offset": 878
      },
      "end": {
        "line": 33,
        "col": 51,
        "offset": 924
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "68fe935f20cdc98ba41dd84794ded4c1ec58c4450bfd2009c3b72a736993b8b93453d7ecb37d36863bfddfe78ead84f7c56508bfeef250319df5bd4555ada8f2_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/32-format-injection-classic.py",
      "start": {
        "line": 33,
        "col": 5,
        "offset": 878
      },
      "end": {
        "line": 33,
        "col": 51,
        "offset": 924
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 33,
              "col": 5,
              "offset": 878
            },
            "end": {
              "line": 33,
              "col": 8,
              "offset": 881
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 5,
                "col": 7,
                "offset": 130
              },
              "svalue_end": {
                "line": 5,
                "col": 90,
                "offset": 213
              },
              "svalue_abstract_content": "design.Design(Flask(__name__)__file__'Vsnippet #32 - Format injection classic')"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "ba218442cf78aa011c03caaadf2ff6eedf9febae92a13707a1b2a756e7a1336d6aeb6cca4c2473a69f05686531f20c31c86da222320d5410034e03421f546a0a_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/34-DoS-regex.py",
      "start": {
        "line": 35,
        "col": 5,
        "offset": 1077
      },
      "end": {
        "line": 35,
        "col": 51,
        "offset": 1123
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "9bfcb59e3025e0db9ba5a34d501fccb752f0a9ed0417214c941bf57db6f89090a97efb4e9544bf173bfab3d6322e80f6c4f65b67712304a5d84840c5337614ce_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/34-DoS-regex.py",
      "start": {
        "line": 35,
        "col": 5,
        "offset": 1077
      },
      "end": {
        "line": 35,
        "col": 51,
        "offset": 1123
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 35,
              "col": 5,
              "offset": 1077
            },
            "end": {
              "line": 35,
              "col": 8,
              "offset": 1080
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 5,
                "col": 7,
                "offset": 130
              },
              "svalue_end": {
                "line": 5,
                "col": 110,
                "offset": 233
              },
              "svalue_abstract_content": "design.Design(Flask(__name__)__file__'Vsnippet #34 - Regular expression Denial of Service (ReDoS)')"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "b9d9561870062788b0ac71558e1eec7136e12fd4180b21c7740abdc575b070be38d687b201b0e0ee7edaf007c037c20f55f0c91e09d07aff924306d97304c681_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.injection.tainted-filename.tainted-filename",
      "path": "clonedf/38-codeinjection-file-write.php",
      "start": {
        "line": 18,
        "col": 19,
        "offset": 341
      },
      "end": {
        "line": 18,
        "col": 24,
        "offset": 346
      },
      "extra": {
        "metavars": {
          "$FILENAME": {
            "start": {
              "line": 18,
              "col": 19,
              "offset": 341
            },
            "end": {
              "line": 18,
              "col": 24,
              "offset": 346
            },
            "abstract_content": "$file"
          }
        },
        "message": "File name based on user input risks server-side request forgery.",
        "metadata": {
          "technology": [
            "php"
          ],
          "category": "security",
          "cwe": [
            "CWE-918: Server-Side Request Forgery (SSRF)"
          ],
          "owasp": [
            "A10:2021 - Server-Side Request Forgery (SSRF)"
          ],
          "references": [
            "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "impact": "MEDIUM",
          "likelihood": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Server-Side Request Forgery (SSRF)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename",
          "shortlink": "https://sg.run/Ayqp",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 16250,
              "rule_id": "5rUpro",
              "rv_id": 945999,
              "url": "https://semgrep.dev/playground/r/ZRT359j/php.lang.security.injection.tainted-filename.tainted-filename",
              "version_id": "ZRT359j"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "2ffbe3e52e7eefae69b27d860749bed8b94bfb73c5bd594efc2c32b4ad6bf230c2cd5417ce1a787ee26d366ea788669a00a7ad0691d8bb8adee70ef7a7816027_0",
        "lines": "$fileTodo = fopen($file, \"a\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/38-codeinjection-file-write.php",
                "start": {
                  "line": 15,
                  "col": 11,
                  "offset": 301
                },
                "end": {
                  "line": 15,
                  "col": 16,
                  "offset": 306
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/38-codeinjection-file-write.php",
                "start": {
                  "line": 15,
                  "col": 3,
                  "offset": 293
                },
                "end": {
                  "line": 15,
                  "col": 8,
                  "offset": 298
                }
              },
              "content": "$file"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/38-codeinjection-file-write.php",
                "start": {
                  "line": 18,
                  "col": 19,
                  "offset": 341
                },
                "end": {
                  "line": 18,
                  "col": 24,
                  "offset": 346
                }
              },
              "$file"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
      "path": "clonedf/38-codeinjection-file-write.php",
      "start": {
        "line": 29,
        "col": 3,
        "offset": 536
      },
      "end": {
        "line": 29,
        "col": 35,
        "offset": 568
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "end": {
              "line": 1,
              "col": 6,
              "offset": 5
            },
            "abstract_content": "GET"
          },
          "$REQ": {
            "start": {
              "line": 15,
              "col": 11,
              "offset": 301
            },
            "end": {
              "line": 15,
              "col": 16,
              "offset": 306
            },
            "abstract_content": "$_GET"
          }
        },
        "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::sink::html-webpage::lang"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/language.basic-syntax.phptags.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
          "shortlink": "https://sg.run/RlGe",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27193,
              "rule_id": "r6UA0y",
              "rv_id": 947718,
              "url": "https://semgrep.dev/playground/r/ExTg4yR/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
              "version_id": "ExTg4yR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "252f2ee19c66e9e00f67a402f3c785539bc52888954f0b479cead87d4ec6d7e5137f17b85b631604c236bb084d57e09c6a1881eee19d8dae3f638bfa145a4dcc_0",
        "lines": "  <?= file_get_contents($file); ?>",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/38-codeinjection-file-write.php",
                "start": {
                  "line": 15,
                  "col": 11,
                  "offset": 301
                },
                "end": {
                  "line": 15,
                  "col": 28,
                  "offset": 318
                }
              },
              "$_GET['fileTodo']"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/38-codeinjection-file-write.php",
                "start": {
                  "line": 15,
                  "col": 3,
                  "offset": 293
                },
                "end": {
                  "line": 15,
                  "col": 8,
                  "offset": 298
                }
              },
              "content": "$file"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/38-codeinjection-file-write.php",
                "start": {
                  "line": 29,
                  "col": 3,
                  "offset": 536
                },
                "end": {
                  "line": 29,
                  "col": 35,
                  "offset": 568
                }
              },
              "<?= file_get_contents($file); ?>"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.injection.tainted-filename.tainted-filename",
      "path": "clonedf/38-codeinjection-file-write.php",
      "start": {
        "line": 29,
        "col": 25,
        "offset": 558
      },
      "end": {
        "line": 29,
        "col": 30,
        "offset": 563
      },
      "extra": {
        "metavars": {
          "$FILENAME": {
            "start": {
              "line": 29,
              "col": 25,
              "offset": 558
            },
            "end": {
              "line": 29,
              "col": 30,
              "offset": 563
            },
            "abstract_content": "$file"
          }
        },
        "message": "File name based on user input risks server-side request forgery.",
        "metadata": {
          "technology": [
            "php"
          ],
          "category": "security",
          "cwe": [
            "CWE-918: Server-Side Request Forgery (SSRF)"
          ],
          "owasp": [
            "A10:2021 - Server-Side Request Forgery (SSRF)"
          ],
          "references": [
            "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "impact": "MEDIUM",
          "likelihood": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Server-Side Request Forgery (SSRF)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename",
          "shortlink": "https://sg.run/Ayqp",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 16250,
              "rule_id": "5rUpro",
              "rv_id": 945999,
              "url": "https://semgrep.dev/playground/r/ZRT359j/php.lang.security.injection.tainted-filename.tainted-filename",
              "version_id": "ZRT359j"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "2ffbe3e52e7eefae69b27d860749bed8b94bfb73c5bd594efc2c32b4ad6bf230c2cd5417ce1a787ee26d366ea788669a00a7ad0691d8bb8adee70ef7a7816027_1",
        "lines": "  <?= file_get_contents($file); ?>",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/38-codeinjection-file-write.php",
                "start": {
                  "line": 15,
                  "col": 11,
                  "offset": 301
                },
                "end": {
                  "line": 15,
                  "col": 16,
                  "offset": 306
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/38-codeinjection-file-write.php",
                "start": {
                  "line": 15,
                  "col": 3,
                  "offset": 293
                },
                "end": {
                  "line": 15,
                  "col": 8,
                  "offset": 298
                }
              },
              "content": "$file"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/38-codeinjection-file-write.php",
                "start": {
                  "line": 29,
                  "col": 25,
                  "offset": 558
                },
                "end": {
                  "line": 29,
                  "col": 30,
                  "offset": 563
                }
              },
              "$file"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.tainted-path-traversal.tainted-path-traversal",
      "path": "clonedf/39-LFI-static-extension-php7.2.php",
      "start": {
        "line": 20,
        "col": 5,
        "offset": 364
      },
      "end": {
        "line": 20,
        "col": 77,
        "offset": 436
      },
      "extra": {
        "metavars": {},
        "message": "Detected user input going into a php include or require command, which can lead to path traversal and sensitive data being exposed. These commands can also lead to code execution. Instead, allowlist files that the user can access or rigorously validate user input.",
        "metadata": {
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-23: Relative Path Traversal"
          ],
          "functional-categories": [
            "web::source::cookie::lang",
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::source::url-path-params::lang",
            "file::sink::file-access::lang"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "references": [
            "https://medium.com/@emmapinheiro42/php-include-ignore-4a3ba81371af",
            "https://www.acunetix.com/websitesecurity/php-security-2/"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.tainted-path-traversal.tainted-path-traversal",
          "shortlink": "https://sg.run/WGrg",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27197,
              "rule_id": "wdUR68",
              "rv_id": 947722,
              "url": "https://semgrep.dev/playground/r/gETeWvY/php.lang.security.tainted-path-traversal.tainted-path-traversal",
              "version_id": "gETeWvY"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "14c2c8e88ec37354446569e71d3f0f53cd567b601534dee3989c308dda6977075986141993f0e605588b85207925bee843ee2498a7346296780196468711daa9_0",
        "lines": "    include($_SERVER['DOCUMENT_ROOT'] . '/views/' . $_GET['page'] . '.php');",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/39-LFI-static-extension-php7.2.php",
                "start": {
                  "line": 20,
                  "col": 53,
                  "offset": 412
                },
                "end": {
                  "line": 20,
                  "col": 58,
                  "offset": 417
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/39-LFI-static-extension-php7.2.php",
                "start": {
                  "line": 20,
                  "col": 5,
                  "offset": 364
                },
                "end": {
                  "line": 20,
                  "col": 77,
                  "offset": 436
                }
              },
              "include($_SERVER['DOCUMENT_ROOT'] . '/views/' . $_GET['page'] . '.php');"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.laravel.security.laravel-path-traversal.laravel-path-traversal",
      "path": "clonedf/39-LFI-static-extension-php7.2.php",
      "start": {
        "line": 20,
        "col": 13,
        "offset": 372
      },
      "end": {
        "line": 20,
        "col": 75,
        "offset": 434
      },
      "extra": {
        "metavars": {
          "$FILE": {
            "start": {
              "line": 20,
              "col": 13,
              "offset": 372
            },
            "end": {
              "line": 20,
              "col": 75,
              "offset": 434
            },
            "abstract_content": "$_SERVER['DOCUMENT_ROOT'].'/views/'.$_GET['page'].'.php'"
          }
        },
        "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In PHP, this can lead to both local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
        "metadata": {
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "functional-categories": [
            "web::source::cookie::lang",
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::source::header::lang",
            "web::source::url-path-params::lang",
            "web::source::form-data::lang",
            "web::source::cookie::laravel",
            "web::source::http-params::laravel",
            "web::source::http-body::laravel",
            "web::source::header::laravel",
            "web::source::url-path-params::laravel",
            "web::source::form-data::laravel",
            "file::sink::file-access::laravel",
            "file::sink::file-access::lang"
          ],
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "references": [
            "https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md#path-traversal"
          ],
          "technology": [
            "laravel"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/php.laravel.security.laravel-path-traversal.laravel-path-traversal",
          "shortlink": "https://sg.run/5v1K",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 36491,
              "rule_id": "OrUBb8",
              "rv_id": 947740,
              "url": "https://semgrep.dev/playground/r/6xTxq47/php.laravel.security.laravel-path-traversal.laravel-path-traversal",
              "version_id": "6xTxq47"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "5adad4deb8b5352105fa61c488120cf9d59bc0eef63fb38b64d9b419fe5a38c9dfb534f154f3f33993d935551180ab25111e0dab93cbd77533a2fec6e3adeef7_0",
        "lines": "    include($_SERVER['DOCUMENT_ROOT'] . '/views/' . $_GET['page'] . '.php');",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/39-LFI-static-extension-php7.2.php",
                "start": {
                  "line": 20,
                  "col": 53,
                  "offset": 412
                },
                "end": {
                  "line": 20,
                  "col": 58,
                  "offset": 417
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/39-LFI-static-extension-php7.2.php",
                "start": {
                  "line": 20,
                  "col": 13,
                  "offset": 372
                },
                "end": {
                  "line": 20,
                  "col": 75,
                  "offset": 434
                }
              },
              "$_SERVER['DOCUMENT_ROOT'] . '/views/' . $_GET['page'] . '.php'"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/4-xss-script-tag.py",
      "start": {
        "line": 34,
        "col": 5,
        "offset": 744
      },
      "end": {
        "line": 34,
        "col": 51,
        "offset": 790
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "fbecd114383f755d67f77e33546ba971b468fb47fa063ca88e035d42305b828a3c1479b0c8f3e4f704ac7d3c1c14339a950c1344c09825fd7e8fb771428c4abe_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/4-xss-script-tag.py",
      "start": {
        "line": 34,
        "col": 5,
        "offset": 744
      },
      "end": {
        "line": 34,
        "col": 51,
        "offset": 790
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 34,
              "col": 5,
              "offset": 744
            },
            "end": {
              "line": 34,
              "col": 8,
              "offset": 747
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 4,
                "col": 7,
                "offset": 160
              },
              "svalue_end": {
                "line": 4,
                "col": 54,
                "offset": 207
              },
              "svalue_abstract_content": "design.Design(Flask(__name__)__file__ title)"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "8ceda5f51a0ff673851445bed2861a9ce96eadb2d334cecaf82c1a5fbae9b17be7217ca00ddce9590636b30f3b931447d37133bfa61d6458fd45b31fc7eec679_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.exec-use.exec-use",
      "path": "clonedf/41-command-injection-escapeshellcmd.php",
      "start": {
        "line": 17,
        "col": 5,
        "offset": 437
      },
      "end": {
        "line": 17,
        "col": 98,
        "offset": 530
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 17,
              "col": 10,
              "offset": 442
            },
            "end": {
              "line": 17,
              "col": 20,
              "offset": 452
            },
            "abstract_content": "shell_exec"
          }
        },
        "message": "Executing non-constant commands. This can lead to command injection.",
        "metadata": {
          "cwe": [
            "CWE-94: Improper Control of Generation of Code ('Code Injection')"
          ],
          "references": [
            "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"
          ],
          "category": "security",
          "technology": [
            "php"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Code Injection"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use",
          "shortlink": "https://sg.run/5Q1j",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9391,
              "rule_id": "qNUjye",
              "rv_id": 945992,
              "url": "https://semgrep.dev/playground/r/kbTYkBG/php.lang.security.exec-use.exec-use",
              "version_id": "kbTYkBG"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "9d7fab3c5778de669215ccae8af6c682d52b10b713b697a581e7683cbe209b87d8314f28b0528d4fab12816cf15a148c68d6b99d11fd51829adc294fc14b1d40_0",
        "lines": "    echo shell_exec(\"pandoc markdown.md -t \". escapeshellcmd($convert) .\" -o ./files/converted\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
      "path": "clonedf/41-command-injection-escapeshellcmd.php",
      "start": {
        "line": 17,
        "col": 5,
        "offset": 437
      },
      "end": {
        "line": 17,
        "col": 98,
        "offset": 530
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "end": {
              "line": 1,
              "col": 7,
              "offset": 6
            },
            "abstract_content": "POST"
          },
          "$REQ": {
            "start": {
              "line": 14,
              "col": 52,
              "offset": 346
            },
            "end": {
              "line": 14,
              "col": 58,
              "offset": 352
            },
            "abstract_content": "$_POST"
          }
        },
        "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::sink::html-webpage::lang"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/language.basic-syntax.phptags.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
          "shortlink": "https://sg.run/RlGe",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27193,
              "rule_id": "r6UA0y",
              "rv_id": 947718,
              "url": "https://semgrep.dev/playground/r/ExTg4yR/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
              "version_id": "ExTg4yR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "0e94d0878b5d15597488f3cb0f2ea5b01f5cd5fe5a55857b9fe30f6100d231d6c1831aa148a82d75d59ea898f136016d877ef3647b5f6854ac78eaa41609afd4_0",
        "lines": "    echo shell_exec(\"pandoc markdown.md -t \". escapeshellcmd($convert) .\" -o ./files/converted\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/41-command-injection-escapeshellcmd.php",
                "start": {
                  "line": 14,
                  "col": 52,
                  "offset": 346
                },
                "end": {
                  "line": 14,
                  "col": 69,
                  "offset": 363
                }
              },
              "$_POST['convert']"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/41-command-injection-escapeshellcmd.php",
                "start": {
                  "line": 14,
                  "col": 5,
                  "offset": 299
                },
                "end": {
                  "line": 14,
                  "col": 13,
                  "offset": 307
                }
              },
              "content": "$convert"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/41-command-injection-escapeshellcmd.php",
                "start": {
                  "line": 17,
                  "col": 5,
                  "offset": 437
                },
                "end": {
                  "line": 17,
                  "col": 98,
                  "offset": 530
                }
              },
              "echo shell_exec(\"pandoc markdown.md -t \". escapeshellcmd($convert) .\" -o ./files/converted\");"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.tainted-command-injection.tainted-command-injection",
      "path": "clonedf/41-command-injection-escapeshellcmd.php",
      "start": {
        "line": 17,
        "col": 10,
        "offset": 442
      },
      "end": {
        "line": 17,
        "col": 97,
        "offset": 529
      },
      "extra": {
        "metavars": {},
        "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input that is used respectively as system commands or command arguments.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::cookie::lang",
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::source::url-path-params::lang",
            "os::sink::os-command-or-thread::lang"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/function.eval",
            "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Command Injection"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection",
          "shortlink": "https://sg.run/Bpj2",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27195,
              "rule_id": "NbUzg9",
              "rv_id": 1014948,
              "url": "https://semgrep.dev/playground/r/YDTv3vq/php.lang.security.tainted-command-injection.tainted-command-injection",
              "version_id": "YDTv3vq"
            }
          }
        },
        "severity": "CRITICAL",
        "fingerprint": "0ab7bb88aa5105fe376732bae6d1bb7e0be83f980a7fc4fac649c9d356b6c95913fb711abc34ee26e76c813885b3b787adcf0b07b11006e3579c680e7a933032_0",
        "lines": "    echo shell_exec(\"pandoc markdown.md -t \". escapeshellcmd($convert) .\" -o ./files/converted\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/41-command-injection-escapeshellcmd.php",
                "start": {
                  "line": 14,
                  "col": 52,
                  "offset": 346
                },
                "end": {
                  "line": 14,
                  "col": 58,
                  "offset": 352
                }
              },
              "$_POST"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/41-command-injection-escapeshellcmd.php",
                "start": {
                  "line": 14,
                  "col": 5,
                  "offset": 299
                },
                "end": {
                  "line": 14,
                  "col": 13,
                  "offset": 307
                }
              },
              "content": "$convert"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/41-command-injection-escapeshellcmd.php",
                "start": {
                  "line": 17,
                  "col": 10,
                  "offset": 442
                },
                "end": {
                  "line": 17,
                  "col": 97,
                  "offset": 529
                }
              },
              "shell_exec(\"pandoc markdown.md -t \". escapeshellcmd($convert) .\" -o ./files/converted\")"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.tainted-exec.tainted-exec",
      "path": "clonedf/41-command-injection-escapeshellcmd.php",
      "start": {
        "line": 17,
        "col": 10,
        "offset": 442
      },
      "end": {
        "line": 17,
        "col": 97,
        "offset": 529
      },
      "extra": {
        "metavars": {},
        "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.",
        "metadata": {
          "cwe": [
            "CWE-94: Improper Control of Generation of Code ('Code Injection')"
          ],
          "references": [
            "https://www.stackhawk.com/blog/php-command-injection/",
            "https://brightsec.com/blog/code-injection-php/",
            "https://www.acunetix.com/websitesecurity/php-security-2/"
          ],
          "category": "security",
          "technology": [
            "php"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Code Injection"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.tainted-exec.tainted-exec",
          "shortlink": "https://sg.run/JAkP",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73146,
              "rule_id": "9AUw06",
              "rv_id": 946014,
              "url": "https://semgrep.dev/playground/r/A8TJzKg/php.lang.security.tainted-exec.tainted-exec",
              "version_id": "A8TJzKg"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "f1e776613aee692f345df46a5d3b2eb05dff6253992ad783b8776e9036ad7129455edec5548beee925250d0f31a4e8c36fd89a626ff38ca433de877ea56607c9_0",
        "lines": "    echo shell_exec(\"pandoc markdown.md -t \". escapeshellcmd($convert) .\" -o ./files/converted\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/41-command-injection-escapeshellcmd.php",
                "start": {
                  "line": 14,
                  "col": 52,
                  "offset": 346
                },
                "end": {
                  "line": 14,
                  "col": 58,
                  "offset": 352
                }
              },
              "$_POST"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/41-command-injection-escapeshellcmd.php",
                "start": {
                  "line": 14,
                  "col": 5,
                  "offset": 299
                },
                "end": {
                  "line": 14,
                  "col": 13,
                  "offset": 307
                }
              },
              "content": "$convert"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/41-command-injection-escapeshellcmd.php",
                "start": {
                  "line": 17,
                  "col": 10,
                  "offset": 442
                },
                "end": {
                  "line": 17,
                  "col": 97,
                  "offset": 529
                }
              },
              "shell_exec(\"pandoc markdown.md -t \". escapeshellcmd($convert) .\" -o ./files/converted\")"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/41-idor-basic-role.py",
      "start": {
        "line": 33,
        "col": 5,
        "offset": 1001
      },
      "end": {
        "line": 33,
        "col": 51,
        "offset": 1047
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "2b87ac2e066b340f3391840c3b468aad22dd51f7997dd67eb5ee73a413d575f665e420436b0ffbd3b5cc2ef2edddb08c83d0ca74cc1a75452f954b38885f73ae_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/41-idor-basic-role.py",
      "start": {
        "line": 33,
        "col": 5,
        "offset": 1001
      },
      "end": {
        "line": 33,
        "col": 51,
        "offset": 1047
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 33,
              "col": 5,
              "offset": 1001
            },
            "end": {
              "line": 33,
              "col": 8,
              "offset": 1004
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 5,
                "col": 7,
                "offset": 128
              },
              "svalue_end": {
                "line": 5,
                "col": 111,
                "offset": 232
              },
              "svalue_abstract_content": "design.Design(Flask(__name__)__file__'Vsnippet 41 - Basic Insecure direct object references (IDOR)')"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "34588461dd1d0960739ba19163c40e45ee18ba59c1af5ad0540f8033dab3926598a27611a0d3ee7dbd989f26016f3b839eddb8e43eda2324422c1298be69535d_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.dangerous-system-call.dangerous-system-call",
      "path": "clonedf/42-command-injection-classic.py",
      "start": {
        "line": 21,
        "col": 53,
        "offset": 684
      },
      "end": {
        "line": 21,
        "col": 103,
        "offset": 734
      },
      "extra": {
        "metavars": {},
        "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
        "metadata": {
          "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
          "cwe": [
            "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
          ],
          "asvs": {
            "control_id": "5.2.4 Dyanmic Code Execution Features",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
            "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "technology": [
            "python"
          ],
          "confidence": "MEDIUM",
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Command Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.dangerous-system-call.dangerous-system-call",
          "shortlink": "https://sg.run/k0W7",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 27272,
              "rule_id": "5rUoP1",
              "rv_id": 946392,
              "url": "https://semgrep.dev/playground/r/yeT0np6/python.lang.security.dangerous-system-call.dangerous-system-call",
              "version_id": "yeT0np6"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "998be7f688720779d990cca0dfdd5d267b09496ac8ed2e8a53a7c2c07d1a18d628f73d24d59d40c49a596a375f6899f0267f79adb6ccbac41e23db96de94d748_0",
        "lines": "        return render_template('index.html', result=os.popen(f\"curl 'http://localhost:1337/{method}'\").read())",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/42-command-injection-classic.py",
                "start": {
                  "line": 17,
                  "col": 18,
                  "offset": 440
                },
                "end": {
                  "line": 17,
                  "col": 44,
                  "offset": 466
                }
              },
              "request.form.get(\"method\")"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/42-command-injection-classic.py",
                "start": {
                  "line": 17,
                  "col": 9,
                  "offset": 431
                },
                "end": {
                  "line": 17,
                  "col": 15,
                  "offset": 437
                }
              },
              "content": "method"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/42-command-injection-classic.py",
                "start": {
                  "line": 21,
                  "col": 53,
                  "offset": 684
                },
                "end": {
                  "line": 21,
                  "col": 103,
                  "offset": 734
                }
              },
              "os.popen(f\"curl 'http://localhost:1337/{method}'\")"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.os.tainted-os-command-stdlib-flask-secure-if-array.tainted-os-command-stdlib-flask-secure-if-array",
      "path": "clonedf/42-command-injection-classic.py",
      "start": {
        "line": 21,
        "col": 62,
        "offset": 693
      },
      "end": {
        "line": 21,
        "col": 102,
        "offset": 733
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 5,
              "offset": 4
            },
            "abstract_content": "form"
          },
          "$PROPERTY": {
            "start": {
              "line": 17,
              "col": 26,
              "offset": 448
            },
            "end": {
              "line": 17,
              "col": 30,
              "offset": 452
            },
            "abstract_content": "form"
          },
          "$FUNC": {
            "start": {
              "line": 21,
              "col": 56,
              "offset": 687
            },
            "end": {
              "line": 21,
              "col": 61,
              "offset": 692
            },
            "abstract_content": "popen"
          },
          "$SINK": {
            "start": {
              "line": 21,
              "col": 62,
              "offset": 693
            },
            "end": {
              "line": 21,
              "col": 102,
              "offset": 733
            },
            "abstract_content": "f\"curl 'http://localhost:1337/{method}'\""
          }
        },
        "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands.",
        "metadata": {
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "confidence": "HIGH",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          ],
          "cwe2020-top25": true,
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "display-name": "OS Command Injection with Flask",
          "functional-categories": [
            "os::sink::command::commands",
            "os::sink::command::os",
            "os::sink::command::popen2",
            "os::sink::command::stdlib",
            "os::sink::command::stdlib2",
            "os::sink::command::stdlib3",
            "os::sink::command::subprocess",
            "web::source::cookie::flask",
            "web::source::form-data::flask",
            "web::source::form-data::flask-wtf",
            "web::source::form-data::wtforms",
            "web::source::header::flask",
            "web::source::http-body::flask",
            "web::source::url-path-params::flask",
            "web::source::url-query-string::flask"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.python.org/3/library/os.html",
            "https://docs.python.org/3/library/subprocess.html#subprocess.Popen",
            "https://owasp.org/Top10/A03_2021-Injection",
            "https://semgrep.dev/docs/cheat-sheets/python-command-injection/",
            "https://stackless.readthedocs.io/en/v2.7.16-slp/library/commands.html"
          ],
          "technology": [
            "commands",
            "flask",
            "flask-wtf",
            "os",
            "popen2",
            "stdlib",
            "stdlib2",
            "stdlib3",
            "subprocess",
            "web",
            "wtforms"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Command Injection"
          ],
          "source": "https://semgrep.dev/r/python.flask.os.tainted-os-command-stdlib-flask-secure-if-array.tainted-os-command-stdlib-flask-secure-if-array",
          "shortlink": "https://sg.run/bwjrP",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 139670,
              "rule_id": "PeUJ9BR",
              "rv_id": 1042271,
              "url": "https://semgrep.dev/playground/r/0bTlpoW/python.flask.os.tainted-os-command-stdlib-flask-secure-if-array.tainted-os-command-stdlib-flask-secure-if-array",
              "version_id": "0bTlpoW"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "8b0ebeae6c6058a149f7897bed0a79e79092b4acf2966f67cafd529d5eea33a3f1c1e1e23fcb9894f2f97b816c5f4dd41972283d42582cd911c88190d265be46_0",
        "lines": "        return render_template('index.html', result=os.popen(f\"curl 'http://localhost:1337/{method}'\").read())",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/42-command-injection-classic.py",
                "start": {
                  "line": 17,
                  "col": 18,
                  "offset": 440
                },
                "end": {
                  "line": 17,
                  "col": 44,
                  "offset": 466
                }
              },
              "request.form.get(\"method\")"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/42-command-injection-classic.py",
                "start": {
                  "line": 17,
                  "col": 9,
                  "offset": 431
                },
                "end": {
                  "line": 17,
                  "col": 15,
                  "offset": 437
                }
              },
              "content": "method"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/42-command-injection-classic.py",
                "start": {
                  "line": 21,
                  "col": 62,
                  "offset": 693
                },
                "end": {
                  "line": 21,
                  "col": 102,
                  "offset": 733
                }
              },
              "f\"curl 'http://localhost:1337/{method}'\""
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/42-command-injection-classic.py",
      "start": {
        "line": 38,
        "col": 5,
        "offset": 1084
      },
      "end": {
        "line": 38,
        "col": 51,
        "offset": 1130
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "c5c6b0101fdfb948b8b8f75878bffde98d4cabca5abee4a971cebc34ff52884892fd28b8bc29d0b5337dd81fc3a5c6db770362711dc134ae7732d1e524f65ac6_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/42-command-injection-classic.py",
      "start": {
        "line": 38,
        "col": 5,
        "offset": 1084
      },
      "end": {
        "line": 38,
        "col": 51,
        "offset": 1130
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 38,
              "col": 5,
              "offset": 1084
            },
            "end": {
              "line": 38,
              "col": 8,
              "offset": 1087
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 4,
                "col": 7,
                "offset": 110
              },
              "svalue_end": {
                "line": 4,
                "col": 87,
                "offset": 190
              },
              "svalue_abstract_content": "design.Design(Flask(__name__)__file__'Vsnippet - Classic command injection')"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "d3ae69ef927b9f5420741e078d42f012c9f51ed1984c25bf3695c895b455c96daab908e48f95c6c906eccddf5685c4872b10c67e409aaffbd6904e6cdb0cd833_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation",
      "path": "clonedf/42-ssti-classic-erb.rb",
      "start": {
        "line": 13,
        "col": 18,
        "offset": 372
      },
      "end": {
        "line": 13,
        "col": 83,
        "offset": 437
      },
      "extra": {
        "metavars": {},
        "message": "Detected manual creation of an ERB template. Manual creation of templates may expose your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks if user input is used to create the template. Instead, create a '.erb' template file and use 'render'.",
        "metadata": {
          "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_template_injection.rb",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "references": [
            "https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown"
          ],
          "category": "security",
          "technology": [
            "rails"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation",
          "shortlink": "https://sg.run/L01L",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9739,
              "rule_id": "4bUzR9",
              "rv_id": 946514,
              "url": "https://semgrep.dev/playground/r/PkTQZg4/ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation",
              "version_id": "PkTQZg4"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "fca700e853973e32e95d5a1d688eb7af4d0656b73600cc59863524b30937e705d1302f30b8a2964c9649a4336363bdf9b1d696a48244f1b904f8c57156bfc2aa_0",
        "lines": "      @message = ERB.new('An email with a reset link has been sent to: ' + @email).result(binding)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation",
      "path": "clonedf/42-ssti-classic-erb.rb",
      "start": {
        "line": 19,
        "col": 21,
        "offset": 571
      },
      "end": {
        "line": 19,
        "col": 59,
        "offset": 609
      },
      "extra": {
        "metavars": {},
        "message": "Detected manual creation of an ERB template. Manual creation of templates may expose your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks if user input is used to create the template. Instead, create a '.erb' template file and use 'render'.",
        "metadata": {
          "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_template_injection.rb",
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "references": [
            "https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown"
          ],
          "category": "security",
          "technology": [
            "rails"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation",
          "shortlink": "https://sg.run/L01L",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9739,
              "rule_id": "4bUzR9",
              "rv_id": 946514,
              "url": "https://semgrep.dev/playground/r/PkTQZg4/ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation",
              "version_id": "PkTQZg4"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "fca700e853973e32e95d5a1d688eb7af4d0656b73600cc59863524b30937e705d1302f30b8a2964c9649a4336363bdf9b1d696a48244f1b904f8c57156bfc2aa_1",
        "lines": "    response.body = ERB.new(File.read('views/index.html')).result(binding)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter",
      "path": "clonedf/5-broken-auth-spoof.go",
      "start": {
        "line": 33,
        "col": 4,
        "offset": 593
      },
      "end": {
        "line": 33,
        "col": 27,
        "offset": 616
      },
      "extra": {
        "metavars": {
          "$PRINTF": {
            "start": {
              "line": 33,
              "col": 8,
              "offset": 597
            },
            "end": {
              "line": 33,
              "col": 16,
              "offset": 605
            },
            "abstract_content": "Fprintln"
          },
          "$WRITER": {
            "start": {
              "line": 33,
              "col": 17,
              "offset": 606
            },
            "end": {
              "line": 33,
              "col": 18,
              "offset": 607
            },
            "abstract_content": "w"
          }
        },
        "message": "Detected 'Fprintf' or similar writing to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users.",
        "metadata": {
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "references": [
            "https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "LOW",
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter",
          "shortlink": "https://sg.run/7oqR",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9138,
              "rule_id": "ReUgyJ",
              "rv_id": 945598,
              "url": "https://semgrep.dev/playground/r/7ZTrQPA/go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter",
              "version_id": "7ZTrQPA"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "7fa388fad1bbba512f44bca0eeb790b33efa8d348eb456d062dc519a1fb5b535071211646161a241fe8b0608921193d54dcca4df8e53d786d498c8d84331c6c6_0",
        "lines": "\t\t\tfmt.Fprintln(w, html())",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter",
      "path": "clonedf/5-broken-auth-spoof.go",
      "start": {
        "line": 38,
        "col": 7,
        "offset": 787
      },
      "end": {
        "line": 38,
        "col": 45,
        "offset": 825
      },
      "extra": {
        "metavars": {
          "$PRINTF": {
            "start": {
              "line": 38,
              "col": 11,
              "offset": 791
            },
            "end": {
              "line": 38,
              "col": 19,
              "offset": 799
            },
            "abstract_content": "Fprintln"
          },
          "$WRITER": {
            "start": {
              "line": 38,
              "col": 20,
              "offset": 800
            },
            "end": {
              "line": 38,
              "col": 21,
              "offset": 801
            },
            "abstract_content": "w"
          }
        },
        "message": "Detected 'Fprintf' or similar writing to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users.",
        "metadata": {
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "references": [
            "https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "LOW",
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter",
          "shortlink": "https://sg.run/7oqR",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9138,
              "rule_id": "ReUgyJ",
              "rv_id": 945598,
              "url": "https://semgrep.dev/playground/r/7ZTrQPA/go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter",
              "version_id": "7ZTrQPA"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "7fa388fad1bbba512f44bca0eeb790b33efa8d348eb456d062dc519a1fb5b535071211646161a241fe8b0608921193d54dcca4df8e53d786d498c8d84331c6c6_1",
        "lines": "\t\t\t\t\t\tfmt.Fprintln(w, html_AdminDashboard())",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.net.use-tls.use-tls",
      "path": "clonedf/5-broken-auth-spoof.go",
      "start": {
        "line": 61,
        "col": 2,
        "offset": 1218
      },
      "end": {
        "line": 61,
        "col": 32,
        "offset": 1248
      },
      "extra": {
        "metavars": {
          "$ADDR": {
            "start": {
              "line": 61,
              "col": 22,
              "offset": 1238
            },
            "end": {
              "line": 61,
              "col": 26,
              "offset": 1242
            },
            "abstract_content": "addr",
            "propagated_value": {
              "svalue_start": {
                "line": 59,
                "col": 10,
                "offset": 1130
              },
              "svalue_end": {
                "line": 59,
                "col": 41,
                "offset": 1161
              },
              "svalue_abstract_content": "fmt.Sprintf(\"0.0.0.0:%d\"port)"
            }
          },
          "$HANDLER": {
            "start": {
              "line": 61,
              "col": 28,
              "offset": 1244
            },
            "end": {
              "line": 61,
              "col": 31,
              "offset": 1247
            },
            "abstract_content": "nil"
          }
        },
        "message": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.",
        "fix": "http.ListenAndServeTLS(addr, certFile, keyFile, nil)",
        "metadata": {
          "cwe": [
            "CWE-319: Cleartext Transmission of Sensitive Information"
          ],
          "owasp": [
            "A03:2017 - Sensitive Data Exposure",
            "A02:2021 - Cryptographic Failures"
          ],
          "references": [
            "https://golang.org/pkg/net/http/#ListenAndServeTLS"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "MEDIUM",
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Mishandled Sensitive Information"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls",
          "shortlink": "https://sg.run/dKbY",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9134,
              "rule_id": "PeUZ8X",
              "rv_id": 945587,
              "url": "https://semgrep.dev/playground/r/NdTqkJK/go.lang.security.audit.net.use-tls.use-tls",
              "version_id": "NdTqkJK"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "475d2c13b65305d4db8a508d5e1c7525a5d4c6305261b2ff2b9942d853c02922f0b793b44f263f495fe53e6e50ba399d82be740789e83925ab8bf6f1dd81c568_0",
        "lines": "\thttp.ListenAndServe(addr, nil)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.dangerous-template-string.dangerous-template-string",
      "path": "clonedf/6-ssti-classic.py",
      "start": {
        "line": 18,
        "col": 5,
        "offset": 411
      },
      "end": {
        "line": 22,
        "col": 64,
        "offset": 590
      },
      "extra": {
        "metavars": {
          "$V": {
            "start": {
              "line": 18,
              "col": 5,
              "offset": 411
            },
            "end": {
              "line": 18,
              "col": 8,
              "offset": 414
            },
            "abstract_content": "tpl"
          },
          "$S": {
            "start": {
              "line": 21,
              "col": 11,
              "offset": 524
            },
            "end": {
              "line": 21,
              "col": 12,
              "offset": 525
            },
            "abstract_content": "s"
          }
        },
        "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
        "metadata": {
          "cwe": [
            "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "references": [
            "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html",
            "https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Code Injection"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string",
          "shortlink": "https://sg.run/b79E",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9526,
              "rule_id": "v8UnZJ",
              "rv_id": 946218,
              "url": "https://semgrep.dev/playground/r/DkTNpA8/python.flask.security.dangerous-template-string.dangerous-template-string",
              "version_id": "DkTNpA8"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "d3f5d5e09294607ef93c234303fc57b3c37f7dc05c099d611f1fe5ed0fdeae9fc55fc3a236c00f5dc5d6ee81e0181484fb21c167a56d6370f073b4df612daf22_0",
        "lines": "    tpl = ('''\n    <script src=\"{{ domain }}/main.js\"></script>\n    <h3 id=\"search\">No result for: %s</h3>\n    ''' % s)\n    return render_template_string(tpl, domain=request.url_root)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.render-template-string.render-template-string",
      "path": "clonedf/6-ssti-classic.py",
      "start": {
        "line": 22,
        "col": 12,
        "offset": 538
      },
      "end": {
        "line": 22,
        "col": 64,
        "offset": 590
      },
      "extra": {
        "metavars": {},
        "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.",
        "metadata": {
          "cwe": [
            "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "references": [
            "https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Code Injection"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
          "shortlink": "https://sg.run/8yjE",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9540,
              "rule_id": "5rUOv1",
              "rv_id": 946214,
              "url": "https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string",
              "version_id": "GxTP7pA"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "0aabb24763b46a079ecf312457dae9d650095200387eddc59ab2f86b428d251ec40da8337aaaa269e7aa179f8eec87f0890e2169577ad015f1207325930c50af_0",
        "lines": "    return render_template_string(tpl, domain=request.url_root)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
      "path": "clonedf/6-ssti-classic.py",
      "start": {
        "line": 45,
        "col": 5,
        "offset": 1086
      },
      "end": {
        "line": 45,
        "col": 51,
        "offset": 1132
      },
      "extra": {
        "metavars": {},
        "message": "Running flask app with host 0.0.0.0 could expose the server publicly.",
        "metadata": {
          "cwe": [
            "CWE-668: Exposure of Resource to Wrong Sphere"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
          "shortlink": "https://sg.run/eLby",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9532,
              "rule_id": "L1Uy1n",
              "rv_id": 946204,
              "url": "https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "version_id": "7ZTrQkG"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "24d3226e234af7a70a97bdacf95efd0e997eab87e5613d71f0bd0d5c407480fd4cdca414113d5f8ddc7cfc65185db35b943b6eed9b8c464b59e4890850069c4e_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "path": "clonedf/6-ssti-classic.py",
      "start": {
        "line": 45,
        "col": 5,
        "offset": 1086
      },
      "end": {
        "line": 45,
        "col": 51,
        "offset": 1132
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 45,
              "col": 5,
              "offset": 1086
            },
            "end": {
              "line": 45,
              "col": 8,
              "offset": 1089
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 4,
                "col": 7,
                "offset": 125
              },
              "svalue_end": {
                "line": 4,
                "col": 101,
                "offset": 219
              },
              "svalue_abstract_content": "design.Design(Flask(__name__)__file__'Vsnippet 6 - Server Side Template Injection (SSTI)')"
            }
          }
        },
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "cwe": [
            "CWE-489: Active Debug Code"
          ],
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "category": "security",
          "technology": [
            "flask"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Active Debug Code"
          ],
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "shortlink": "https://sg.run/dKrd",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 946206,
              "url": "https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "8KTKjwR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "c0d4b50b360fe5bc8cd51a2819aa9b9184edd436a977aa0a5236b9a6b49c41e8968c449df9f3e186286a8a9bc583ff2a832a9d04b231a464b53ee9e026034b8f_0",
        "lines": "    app.run(host='0.0.0.0', port=1337, debug=True)",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
      "path": "clonedf/7-sqli-blind-variable-mixup.php",
      "start": {
        "line": 29,
        "col": 38,
        "offset": 732
      },
      "end": {
        "line": 29,
        "col": 121,
        "offset": 815
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 7,
              "offset": 6
            },
            "abstract_content": "SELECT"
          },
          "$EXPR": {
            "start": {
              "line": 29,
              "col": 39,
              "offset": 733
            },
            "end": {
              "line": 29,
              "col": 79,
              "offset": 773
            },
            "abstract_content": "SELECT * FROM `products` WHERE color = '"
          }
        },
        "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/SQL_Injection"
          ],
          "category": "security",
          "technology": [
            "php"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
          "shortlink": "https://sg.run/lZYG",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14757,
              "rule_id": "qNUXdL",
              "rv_id": 1039629,
              "url": "https://semgrep.dev/playground/r/7ZToWNO/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
              "version_id": "7ZToWNO"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "5859549cbfd9a697a561407e3785d627c70998711dfdc7bc04e9fcf976651ed07fea71053f16c2f24f22a35b1e6aa3e866a9b40c16973829861e1398e5b19841_0",
        "lines": "    $result = mysqli_query($mysqlDB, \"SELECT * FROM `products` WHERE color = '$color' AND (id > $id AND stock > $stock)\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/7-sqli-blind-variable-mixup.php",
                "start": {
                  "line": 18,
                  "col": 18,
                  "offset": 428
                },
                "end": {
                  "line": 18,
                  "col": 23,
                  "offset": 433
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/7-sqli-blind-variable-mixup.php",
                "start": {
                  "line": 18,
                  "col": 5,
                  "offset": 415
                },
                "end": {
                  "line": 18,
                  "col": 8,
                  "offset": 418
                }
              },
              "content": "$id"
            },
            {
              "location": {
                "path": "clonedf/7-sqli-blind-variable-mixup.php",
                "start": {
                  "line": 18,
                  "col": 5,
                  "offset": 415
                },
                "end": {
                  "line": 18,
                  "col": 8,
                  "offset": 418
                }
              },
              "content": "$id"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/7-sqli-blind-variable-mixup.php",
                "start": {
                  "line": 29,
                  "col": 38,
                  "offset": 732
                },
                "end": {
                  "line": 29,
                  "col": 121,
                  "offset": 815
                }
              },
              "\"SELECT * FROM `products` WHERE color = '$color' AND (id > $id AND stock > $stock)\""
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection",
      "path": "clonedf/7-sqli-blind-variable-mixup.php",
      "start": {
        "line": 29,
        "col": 38,
        "offset": 732
      },
      "end": {
        "line": 29,
        "col": 121,
        "offset": 815
      },
      "extra": {
        "metavars": {
          "$X": {
            "start": {
              "line": 29,
              "col": 28,
              "offset": 722
            },
            "end": {
              "line": 29,
              "col": 36,
              "offset": 730
            },
            "abstract_content": "$mysqlDB"
          },
          "$QUERY": {
            "start": {
              "line": 29,
              "col": 38,
              "offset": 732
            },
            "end": {
              "line": 29,
              "col": 121,
              "offset": 815
            },
            "abstract_content": "\"\"SELECT * FROM `products` WHERE color = '$color' AND (id > $id AND stock > $stock)\""
          }
        },
        "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in PHP, it is possible to adopt prepared statements by using `PDO` with bind variables using `bindParam()`.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::cookie::lang",
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::source::header::lang",
            "web::source::url-path-params::lang",
            "web::source::form-data::lang",
            "web::source::cookie::laravel",
            "web::source::http-params::laravel",
            "web::source::http-body::laravel",
            "web::source::header::laravel",
            "web::source::url-path-params::laravel",
            "web::source::form-data::laravel",
            "db::sink::sql-or-nosql-query::lang"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md"
          ],
          "technology": [
            "laravel"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection",
          "shortlink": "https://sg.run/PBq3",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 36489,
              "rule_id": "wdU5LD",
              "rv_id": 1014954,
              "url": "https://semgrep.dev/playground/r/BjT1917/php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection",
              "version_id": "BjT1917"
            }
          }
        },
        "severity": "CRITICAL",
        "fingerprint": "4c07435a12f70d4c9e72568f5bfe44fc7d7524be9a9cbef72ebad6b659927e88c8fbaa9cc8a930187eab625b3f4c111e990e8e0b9a56167ceaefda1c2f3a289b_0",
        "lines": "    $result = mysqli_query($mysqlDB, \"SELECT * FROM `products` WHERE color = '$color' AND (id > $id AND stock > $stock)\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/7-sqli-blind-variable-mixup.php",
                "start": {
                  "line": 18,
                  "col": 18,
                  "offset": 428
                },
                "end": {
                  "line": 18,
                  "col": 23,
                  "offset": 433
                }
              },
              "$_GET"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/7-sqli-blind-variable-mixup.php",
                "start": {
                  "line": 18,
                  "col": 5,
                  "offset": 415
                },
                "end": {
                  "line": 18,
                  "col": 8,
                  "offset": 418
                }
              },
              "content": "$id"
            },
            {
              "location": {
                "path": "clonedf/7-sqli-blind-variable-mixup.php",
                "start": {
                  "line": 18,
                  "col": 5,
                  "offset": 415
                },
                "end": {
                  "line": 18,
                  "col": 8,
                  "offset": 418
                }
              },
              "content": "$id"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/7-sqli-blind-variable-mixup.php",
                "start": {
                  "line": 29,
                  "col": 38,
                  "offset": 732
                },
                "end": {
                  "line": 29,
                  "col": 121,
                  "offset": 815
                }
              },
              "\"SELECT * FROM `products` WHERE color = '$color' AND (id > $id AND stock > $stock)\""
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.exec-use.exec-use",
      "path": "clonedf/command-injection-saint_patrick.php",
      "start": {
        "line": 21,
        "col": 5,
        "offset": 579
      },
      "end": {
        "line": 21,
        "col": 32,
        "offset": 606
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 21,
              "col": 15,
              "offset": 589
            },
            "end": {
              "line": 21,
              "col": 25,
              "offset": 599
            },
            "abstract_content": "shell_exec"
          }
        },
        "message": "Executing non-constant commands. This can lead to command injection.",
        "metadata": {
          "cwe": [
            "CWE-94: Improper Control of Generation of Code ('Code Injection')"
          ],
          "references": [
            "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"
          ],
          "category": "security",
          "technology": [
            "php"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Code Injection"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use",
          "shortlink": "https://sg.run/5Q1j",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9391,
              "rule_id": "qNUjye",
              "rv_id": 945992,
              "url": "https://semgrep.dev/playground/r/kbTYkBG/php.lang.security.exec-use.exec-use",
              "version_id": "kbTYkBG"
            }
          }
        },
        "severity": "ERROR",
        "fingerprint": "94e2f475ffa4c13780d142228981d8030b4b3803bbb2a573dd4e7d327c04329a9e81585b5d86cde0772b2b3d92e82e5b2ad2dcb25a993bb89b14e7477b18bb28_0",
        "lines": "    $output = shell_exec($cmd);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
      "path": "clonedf/command-injection-saint_patrick.php",
      "start": {
        "line": 69,
        "col": 9,
        "offset": 2083
      },
      "end": {
        "line": 69,
        "col": 28,
        "offset": 2102
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "end": {
              "line": 1,
              "col": 7,
              "offset": 6
            },
            "abstract_content": "POST"
          },
          "$REQ": {
            "start": {
              "line": 34,
              "col": 35,
              "offset": 944
            },
            "end": {
              "line": 34,
              "col": 41,
              "offset": 950
            },
            "abstract_content": "$_POST"
          }
        },
        "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::sink::html-webpage::lang"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/language.basic-syntax.phptags.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
          "shortlink": "https://sg.run/RlGe",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27193,
              "rule_id": "r6UA0y",
              "rv_id": 947718,
              "url": "https://semgrep.dev/playground/r/ExTg4yR/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
              "version_id": "ExTg4yR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "2212ceb1fe0c933d4f37e43e9e78d1a065a34c196a0525ab6dfd7a68dbebf56df3a30183982543690edf002cd55f4208abd6dd6c73057df9c8d3428b3189d4d3_0",
        "lines": "> <?php echo $order_result; ?>",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/command-injection-saint_patrick.php",
                "start": {
                  "line": 34,
                  "col": 35,
                  "offset": 944
                },
                "end": {
                  "line": 34,
                  "col": 49,
                  "offset": 958
                }
              },
              "$_POST['item']"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/command-injection-saint_patrick.php",
                "start": {
                  "line": 34,
                  "col": 5,
                  "offset": 914
                },
                "end": {
                  "line": 34,
                  "col": 18,
                  "offset": 927
                }
              },
              "content": "$order_result"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/command-injection-saint_patrick.php",
                "start": {
                  "line": 69,
                  "col": 9,
                  "offset": 2083
                },
                "end": {
                  "line": 69,
                  "col": 28,
                  "offset": 2102
                }
              },
              "echo $order_result;"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
      "path": "clonedf/index.js",
      "start": {
        "line": 4,
        "col": 7,
        "offset": 115
      },
      "end": {
        "line": 4,
        "col": 22,
        "offset": 130
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 4,
              "col": 7,
              "offset": 115
            },
            "end": {
              "line": 4,
              "col": 10,
              "offset": 118
            },
            "abstract_content": "app"
          },
          "$EXPRESS": {
            "start": {
              "line": 4,
              "col": 13,
              "offset": 121
            },
            "end": {
              "line": 4,
              "col": 20,
              "offset": 128
            },
            "abstract_content": "express",
            "propagated_value": {
              "svalue_start": {
                "line": 1,
                "col": 17,
                "offset": 16
              },
              "svalue_end": {
                "line": 1,
                "col": 35,
                "offset": 34
              },
              "svalue_abstract_content": "require('express')"
            }
          }
        },
        "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
        "metadata": {
          "category": "security",
          "references": [
            "https://www.npmjs.com/package/csurf",
            "https://www.npmjs.com/package/csrf",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
          ],
          "cwe": [
            "CWE-352: Cross-Site Request Forgery (CSRF)"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "technology": [
            "javascript",
            "typescript",
            "express"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site Request Forgery (CSRF)"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
          "shortlink": "https://sg.run/BxzR",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 22551,
              "rule_id": "wdUKEq",
              "rv_id": 945789,
              "url": "https://semgrep.dev/playground/r/NdTqkvB/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
              "version_id": "NdTqkvB"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "965592999eade80ae1ea092b7971cf8e69a2c1f37cedcb53a2332f01020fb3ff4c86f4064e06a468716de155c0b043c541f5af29be9c9379623d03f89a68bc03_0",
        "lines": "const app = express();",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.xss.direct-response-write.direct-response-write",
      "path": "clonedf/index.js",
      "start": {
        "line": 51,
        "col": 12,
        "offset": 1679
      },
      "end": {
        "line": 70,
        "col": 3,
        "offset": 2294
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 5,
              "offset": 4
            },
            "abstract_content": "post"
          },
          "$APP": {
            "start": {
              "line": 43,
              "col": 1,
              "offset": 1412
            },
            "end": {
              "line": 43,
              "col": 4,
              "offset": 1415
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 4,
                "col": 13,
                "offset": 121
              },
              "svalue_end": {
                "line": 4,
                "col": 22,
                "offset": 130
              },
              "svalue_abstract_content": "express()"
            }
          },
          "$METHOD": {
            "start": {
              "line": 43,
              "col": 5,
              "offset": 1416
            },
            "end": {
              "line": 43,
              "col": 9,
              "offset": 1420
            },
            "abstract_content": "post"
          },
          "$RES": {
            "start": {
              "line": 43,
              "col": 32,
              "offset": 1443
            },
            "end": {
              "line": 43,
              "col": 35,
              "offset": 1446
            },
            "abstract_content": "res"
          },
          "$REQ": {
            "start": {
              "line": 44,
              "col": 30,
              "offset": 1481
            },
            "end": {
              "line": 44,
              "col": 33,
              "offset": 1484
            },
            "abstract_content": "req"
          },
          "$ARG": {
            "start": {
              "line": 51,
              "col": 12,
              "offset": 1679
            },
            "end": {
              "line": 70,
              "col": 3,
              "offset": 2294
            },
            "abstract_content": "`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <title>Letter Sent</title>\n      <link rel=\"stylesheet\" href=\"/ignore/design/style.css\">\n    </head>\n    <body>\n      <div class=\"snowflakes\" aria-hidden=\"true\"></div>\n      <div class=\"container\">\n        <h1>Dear childName \ud83c\udf84,</h1>\n        <p>Your letter has been sent to Santa Claus successfully!</p>\n        <p>Here\u2019s what you wrote:</p>\n        <p><strong>letterContent</strong></p>\n        <a href=\"/\" class=\"button\">Send another letter</a>\n      </div>\n      <script src=\"/ignore/design/snowflakes.js\"></script>\n    </body>\n    </html>\n  "
          }
        },
        "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.",
        "metadata": {
          "interfile": true,
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "category": "security",
          "technology": [
            "express"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write",
          "shortlink": "https://sg.run/vzGl",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9277,
              "rule_id": "3qUPA1",
              "rv_id": 945811,
              "url": "https://semgrep.dev/playground/r/RGTAgNy/javascript.express.security.audit.xss.direct-response-write.direct-response-write",
              "version_id": "RGTAgNy"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "a451c0784dda4e1199450cfe59dfcf317f9d10b409593ee601db143801143bec03b44cb685e9886eacfb4423bf01099e2a85a3dddefb482e64a5acf6ee944de8_0",
        "lines": "  res.send(`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <title>Letter Sent</title>\n      <link rel=\"stylesheet\" href=\"/ignore/design/style.css\">\n    </head>\n    <body>\n      <div class=\"snowflakes\" aria-hidden=\"true\"></div>\n      <div class=\"container\">\n        <h1>Dear ${childName} \ud83c\udf84,</h1>\n        <p>Your letter has been sent to Santa Claus successfully!</p>\n        <p>Here\u2019s what you wrote:</p>\n        <p><strong>${letterContent}</strong></p>\n        <a href=\"/\" class=\"button\">Send another letter</a>\n      </div>\n      <script src=\"/ignore/design/snowflakes.js\"></script>\n    </body>\n    </html>\n  `);",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/index.js",
                "start": {
                  "line": 44,
                  "col": 30,
                  "offset": 1481
                },
                "end": {
                  "line": 44,
                  "col": 38,
                  "offset": 1489
                }
              },
              "req.body"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/index.js",
                "start": {
                  "line": 44,
                  "col": 7,
                  "offset": 1458
                },
                "end": {
                  "line": 44,
                  "col": 16,
                  "offset": 1467
                }
              },
              "content": "childName"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/index.js",
                "start": {
                  "line": 51,
                  "col": 12,
                  "offset": 1679
                },
                "end": {
                  "line": 70,
                  "col": 3,
                  "offset": 2294
                }
              },
              "`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <title>Letter Sent</title>\n      <link rel=\"stylesheet\" href=\"/ignore/design/style.css\">\n    </head>\n    <body>\n      <div class=\"snowflakes\" aria-hidden=\"true\"></div>\n      <div class=\"container\">\n        <h1>Dear ${childName} \ud83c\udf84,</h1>\n        <p>Your letter has been sent to Santa Claus successfully!</p>\n        <p>Here\u2019s what you wrote:</p>\n        <p><strong>${letterContent}</strong></p>\n        <a href=\"/\" class=\"button\">Send another letter</a>\n      </div>\n      <script src=\"/ignore/design/snowflakes.js\"></script>\n    </body>\n    </html>\n  "
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.injection.raw-html-format.raw-html-format",
      "path": "clonedf/index.js",
      "start": {
        "line": 61,
        "col": 1,
        "offset": 1937
      },
      "end": {
        "line": 62,
        "col": 1,
        "offset": 1978
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 5,
              "offset": 4
            },
            "abstract_content": "post"
          },
          "$APP": {
            "start": {
              "line": 43,
              "col": 1,
              "offset": 1412
            },
            "end": {
              "line": 43,
              "col": 4,
              "offset": 1415
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 4,
                "col": 13,
                "offset": 121
              },
              "svalue_end": {
                "line": 4,
                "col": 22,
                "offset": 130
              },
              "svalue_abstract_content": "express()"
            }
          },
          "$METHOD": {
            "start": {
              "line": 43,
              "col": 5,
              "offset": 1416
            },
            "end": {
              "line": 43,
              "col": 9,
              "offset": 1420
            },
            "abstract_content": "post"
          },
          "$RES": {
            "start": {
              "line": 43,
              "col": 32,
              "offset": 1443
            },
            "end": {
              "line": 43,
              "col": 35,
              "offset": 1446
            },
            "abstract_content": "res"
          },
          "$REQ": {
            "start": {
              "line": 44,
              "col": 30,
              "offset": 1481
            },
            "end": {
              "line": 44,
              "col": 33,
              "offset": 1484
            },
            "abstract_content": "req"
          }
        },
        "message": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "category": "security",
          "technology": [
            "express"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.injection.raw-html-format.raw-html-format",
          "shortlink": "https://sg.run/5DO3",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14691,
              "rule_id": "5rUL0X",
              "rv_id": 945836,
              "url": "https://semgrep.dev/playground/r/xyTqnbZ/javascript.express.security.injection.raw-html-format.raw-html-format",
              "version_id": "xyTqnbZ"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "b765879be191f5c872f71fc31eac273de71df9cbc1290cf68ec1f30a0c7390767ea1c6efdf538b6e459cb005b1da86652f1bd8a54a964b294fc71a899b16079b_0",
        "lines": "        <h1>Dear ${childName} \ud83c\udf84,</h1>\n        <p>Your letter has been sent to Santa Claus successfully!</p>",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/index.js",
                "start": {
                  "line": 44,
                  "col": 30,
                  "offset": 1481
                },
                "end": {
                  "line": 44,
                  "col": 38,
                  "offset": 1489
                }
              },
              "req.body"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/index.js",
                "start": {
                  "line": 44,
                  "col": 7,
                  "offset": 1458
                },
                "end": {
                  "line": 44,
                  "col": 16,
                  "offset": 1467
                }
              },
              "content": "childName"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/index.js",
                "start": {
                  "line": 61,
                  "col": 1,
                  "offset": 1937
                },
                "end": {
                  "line": 61,
                  "col": 42,
                  "offset": 1978
                }
              },
              "        <h1>Dear ${childName} \ud83c\udf84,</h1>\n"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
      "path": "clonedf/index.js",
      "start": {
        "line": 61,
        "col": 20,
        "offset": 1956
      },
      "end": {
        "line": 61,
        "col": 29,
        "offset": 1965
      },
      "extra": {
        "metavars": {
          "$ANYFUNC": {
            "start": {
              "line": 44,
              "col": 19,
              "offset": 1470
            },
            "end": {
              "line": 44,
              "col": 29,
              "offset": 1480
            },
            "abstract_content": "escapeHTML",
            "propagated_value": {
              "svalue_start": {
                "line": 6,
                "col": 20,
                "offset": 170
              },
              "svalue_end": {
                "line": 6,
                "col": 42,
                "offset": 192
              },
              "svalue_abstract_content": "require('escape-html')"
            }
          },
          "$OTHERFUNC": {
            "start": {
              "line": 51,
              "col": 3,
              "offset": 1670
            },
            "end": {
              "line": 51,
              "col": 11,
              "offset": 1678
            },
            "abstract_content": "res.send"
          },
          "$UNK": {
            "start": {
              "line": 61,
              "col": 20,
              "offset": 1956
            },
            "end": {
              "line": 61,
              "col": 29,
              "offset": 1965
            },
            "abstract_content": "childName",
            "propagated_value": {
              "svalue_start": {
                "line": 44,
                "col": 19,
                "offset": 1470
              },
              "svalue_end": {
                "line": 44,
                "col": 49,
                "offset": 1500
              },
              "svalue_abstract_content": "escapeHTML(req.body.childName)"
            }
          }
        },
        "message": "Cannot determine what 'childName' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'childName' is not externally controlled, or sanitize this data.",
        "metadata": {
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "references": [
            "https://www.developsec.com/2017/11/09/xss-in-a-script-tag/",
            "https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
          "shortlink": "https://sg.run/1Zy1",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9322,
              "rule_id": "OrU37Y",
              "rv_id": 945883,
              "url": "https://semgrep.dev/playground/r/X0TL8X4/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
              "version_id": "X0TL8X4"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "04fde08cf72e5fa45ddabef606c3967dd3b9690c4edb7b9832b2dd97ad058464d974655ad8f721214ba5a619064576d8980c3a05cc8b1665dad83e570661fc8f_0",
        "lines": "        <h1>Dear ${childName} \ud83c\udf84,</h1>",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.injection.raw-html-format.raw-html-format",
      "path": "clonedf/index.js",
      "start": {
        "line": 64,
        "col": 1,
        "offset": 2088
      },
      "end": {
        "line": 65,
        "col": 1,
        "offset": 2137
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 5,
              "offset": 4
            },
            "abstract_content": "post"
          },
          "$APP": {
            "start": {
              "line": 43,
              "col": 1,
              "offset": 1412
            },
            "end": {
              "line": 43,
              "col": 4,
              "offset": 1415
            },
            "abstract_content": "app",
            "propagated_value": {
              "svalue_start": {
                "line": 4,
                "col": 13,
                "offset": 121
              },
              "svalue_end": {
                "line": 4,
                "col": 22,
                "offset": 130
              },
              "svalue_abstract_content": "express()"
            }
          },
          "$METHOD": {
            "start": {
              "line": 43,
              "col": 5,
              "offset": 1416
            },
            "end": {
              "line": 43,
              "col": 9,
              "offset": 1420
            },
            "abstract_content": "post"
          },
          "$RES": {
            "start": {
              "line": 43,
              "col": 32,
              "offset": 1443
            },
            "end": {
              "line": 43,
              "col": 35,
              "offset": 1446
            },
            "abstract_content": "res"
          },
          "$REQ": {
            "start": {
              "line": 45,
              "col": 23,
              "offset": 1524
            },
            "end": {
              "line": 45,
              "col": 26,
              "offset": 1527
            },
            "abstract_content": "req"
          }
        },
        "message": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.",
        "metadata": {
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
          ],
          "category": "security",
          "technology": [
            "express"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.injection.raw-html-format.raw-html-format",
          "shortlink": "https://sg.run/5DO3",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 14691,
              "rule_id": "5rUL0X",
              "rv_id": 945836,
              "url": "https://semgrep.dev/playground/r/xyTqnbZ/javascript.express.security.injection.raw-html-format.raw-html-format",
              "version_id": "xyTqnbZ"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "b765879be191f5c872f71fc31eac273de71df9cbc1290cf68ec1f30a0c7390767ea1c6efdf538b6e459cb005b1da86652f1bd8a54a964b294fc71a899b16079b_1",
        "lines": "        <p><strong>${letterContent}</strong></p>\n        <a href=\"/\" class=\"button\">Send another letter</a>",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/index.js",
                "start": {
                  "line": 45,
                  "col": 23,
                  "offset": 1524
                },
                "end": {
                  "line": 45,
                  "col": 31,
                  "offset": 1532
                }
              },
              "req.body"
            ]
          ],
          "intermediate_vars": [
            {
              "location": {
                "path": "clonedf/index.js",
                "start": {
                  "line": 45,
                  "col": 7,
                  "offset": 1508
                },
                "end": {
                  "line": 45,
                  "col": 20,
                  "offset": 1521
                }
              },
              "content": "letterContent"
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/index.js",
                "start": {
                  "line": 64,
                  "col": 1,
                  "offset": 2088
                },
                "end": {
                  "line": 64,
                  "col": 50,
                  "offset": 2137
                }
              },
              "        <p><strong>${letterContent}</strong></p>\n"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "clonedf/payloadGen.py",
      "start": {
        "line": 25,
        "col": 28,
        "offset": 583
      },
      "end": {
        "line": 25,
        "col": 51,
        "offset": 606
      },
      "extra": {
        "metavars": {
          "$FUNC": {
            "start": {
              "line": 25,
              "col": 35,
              "offset": 590
            },
            "end": {
              "line": 25,
              "col": 40,
              "offset": 595
            },
            "abstract_content": "dumps"
          }
        },
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9675,
              "rule_id": "EwU2BJ",
              "rv_id": 946397,
              "url": "https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle",
              "version_id": "w8TKJL9"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "734ca70d2e5429e62ff4bbe3ea46523f02171c4d656ce454bbbd1786787c98f4884c1ef516eab55a43fde9a073222c68f6ce8ffd2e2f2d561af4a5f42d2c1c37_0",
        "lines": "payload = base64.b64encode(pickle.dumps(Exploit()))",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
      "path": "clonedf/pp-classic.js",
      "start": {
        "line": 9,
        "col": 7,
        "offset": 204
      },
      "end": {
        "line": 9,
        "col": 22,
        "offset": 219
      },
      "extra": {
        "metavars": {
          "$APP": {
            "start": {
              "line": 9,
              "col": 7,
              "offset": 204
            },
            "end": {
              "line": 9,
              "col": 10,
              "offset": 207
            },
            "abstract_content": "app"
          },
          "$EXPRESS": {
            "start": {
              "line": 9,
              "col": 13,
              "offset": 210
            },
            "end": {
              "line": 9,
              "col": 20,
              "offset": 217
            },
            "abstract_content": "express",
            "propagated_value": {
              "svalue_start": {
                "line": 4,
                "col": 17,
                "offset": 62
              },
              "svalue_end": {
                "line": 4,
                "col": 35,
                "offset": 80
              },
              "svalue_abstract_content": "require('express')"
            }
          }
        },
        "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
        "metadata": {
          "category": "security",
          "references": [
            "https://www.npmjs.com/package/csurf",
            "https://www.npmjs.com/package/csrf",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
          ],
          "cwe": [
            "CWE-352: Cross-Site Request Forgery (CSRF)"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "technology": [
            "javascript",
            "typescript",
            "express"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site Request Forgery (CSRF)"
          ],
          "source": "https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
          "shortlink": "https://sg.run/BxzR",
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 22551,
              "rule_id": "wdUKEq",
              "rv_id": 945789,
              "url": "https://semgrep.dev/playground/r/NdTqkvB/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
              "version_id": "NdTqkvB"
            }
          }
        },
        "severity": "INFO",
        "fingerprint": "b416caa4dbcd10288ea3e0cbb541cb1666d28a3a98158c7ae5f7aa4d5cbcfb2b4a60efafd154de7295112e4ff1e1af1ed7171d856379a78d86af9aa8b68a7ac0_0",
        "lines": "const app = express()",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
      "path": "clonedf/xss-ethical-hackers-day.php",
      "start": {
        "line": 72,
        "col": 40,
        "offset": 2462
      },
      "end": {
        "line": 72,
        "col": 102,
        "offset": 2524
      },
      "extra": {
        "metavars": {
          "$1": {
            "start": {
              "line": 1,
              "col": 3,
              "offset": 2
            },
            "end": {
              "line": 1,
              "col": 10,
              "offset": 9
            },
            "abstract_content": "REQUEST"
          },
          "$REQ": {
            "start": {
              "line": 72,
              "col": 71,
              "offset": 2493
            },
            "end": {
              "line": 72,
              "col": 80,
              "offset": 2502
            },
            "abstract_content": "$_REQUEST"
          }
        },
        "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.",
        "metadata": {
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "category": "security",
          "subcategory": [
            "vuln"
          ],
          "cwe": [
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "functional-categories": [
            "web::source::http-params::lang",
            "web::source::http-body::lang",
            "web::sink::html-webpage::lang"
          ],
          "owasp": [
            "A07:2017 - Cross-Site Scripting (XSS)",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://www.php.net/manual/en/language.basic-syntax.phptags.php"
          ],
          "technology": [
            "php"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cross-Site-Scripting (XSS)"
          ],
          "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
          "shortlink": "https://sg.run/RlGe",
          "semgrep.dev": {
            "rule": {
              "origin": "pro_rules",
              "r_id": 27193,
              "rule_id": "r6UA0y",
              "rv_id": 947718,
              "url": "https://semgrep.dev/playground/r/ExTg4yR/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag",
              "version_id": "ExTg4yR"
            }
          }
        },
        "severity": "WARNING",
        "fingerprint": "7b4bb36b013c6d1a13db4e1db0cb1a10ebe62b4515ac89444c4063c1a39cf41a2ae815e4fedde921cf09882ca601e988b78e3d395f030e0def41a866604bc15b_0",
        "lines": "        var test = new SessionManager(\"<?= preg_replace('/[<>]/', '', $_REQUEST['todo-username']); ?>\");",
        "is_ignored": false,
        "validation_state": "NO_VALIDATOR",
        "dataflow_trace": {
          "taint_source": [
            "CliLoc",
            [
              {
                "path": "clonedf/xss-ethical-hackers-day.php",
                "start": {
                  "line": 72,
                  "col": 71,
                  "offset": 2493
                },
                "end": {
                  "line": 72,
                  "col": 97,
                  "offset": 2519
                }
              },
              "$_REQUEST['todo-username']"
            ]
          ],
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "path": "clonedf/xss-ethical-hackers-day.php",
                "start": {
                  "line": 72,
                  "col": 40,
                  "offset": 2462
                },
                "end": {
                  "line": 72,
                  "col": 102,
                  "offset": 2524
                }
              },
              "<?= preg_replace('/[<>]/', '', $_REQUEST['todo-username']); ?>"
            ]
          ]
        },
        "engine_kind": "OSS"
      }
    }
  ],
  "errors": [
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm",
      "message": "Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on clonedf/11-cors-classic.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/11-cors-classic.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.express.web.cors-default-config-express.cors-default-config-express",
      "message": "Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on clonedf/11-cors-classic.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/11-cors-classic.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.koa.web.cors-default-config-koa.cors-default-config-koa",
      "message": "Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on clonedf/11-cors-classic.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/11-cors-classic.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm",
      "message": "Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on clonedf/20-sqli-login.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/20-sqli-login.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.express.web.cors-default-config-express.cors-default-config-express",
      "message": "Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on clonedf/20-sqli-login.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/20-sqli-login.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.koa.web.cors-default-config-koa.cors-default-config-koa",
      "message": "Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on clonedf/20-sqli-login.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/20-sqli-login.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm",
      "message": "Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on clonedf/checkLogout.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/checkLogout.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm",
      "message": "Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on clonedf/checkLogout_1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/checkLogout_1.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm",
      "message": "Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on clonedf/db.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/db.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.express.web.cors-default-config-express.cors-default-config-express",
      "message": "Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on clonedf/db.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/db.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.koa.web.cors-default-config-koa.cors-default-config-koa",
      "message": "Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on clonedf/db.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/db.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm",
      "message": "Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on clonedf/index.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/index.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.express.web.cors-default-config-express.cors-default-config-express",
      "message": "Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on clonedf/index.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/index.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.koa.web.cors-default-config-koa.cors-default-config-koa",
      "message": "Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on clonedf/index.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/index.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm",
      "message": "Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on clonedf/pp-classic.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/pp-classic.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.express.web.cors-default-config-express.cors-default-config-express",
      "message": "Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on clonedf/pp-classic.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/pp-classic.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.koa.web.cors-default-config-koa.cors-default-config-koa",
      "message": "Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on clonedf/pp-classic.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/pp-classic.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm",
      "message": "Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on clonedf/snowflakes.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/snowflakes.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.express.web.cors-default-config-express.cors-default-config-express",
      "message": "Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on clonedf/snowflakes.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/snowflakes.js"
    },
    {
      "code": 2,
      "level": "warn",
      "type": "Internal matching error",
      "rule_id": "javascript.koa.web.cors-default-config-koa.cors-default-config-koa",
      "message": "Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on clonedf/snowflakes.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine",
      "path": "clonedf/snowflakes.js"
    }
  ],
  "paths": {
    "scanned": [
      "clonedf/1-sqli-escape-invalid-blacklist-order.php",
      "clonedf/11-cors-classic.js",
      "clonedf/13-FileUpload_CodeInjection.py",
      "clonedf/1337.json",
      "clonedf/14-DoS-loop.php",
      "clonedf/15-Exploit.py",
      "clonedf/15-exploit.py",
      "clonedf/15-idor-password-reset.php",
      "clonedf/16-idor-invalid-if-statement.php",
      "clonedf/17-deserialization-classic.py",
      "clonedf/18-pathTraversal-improper-regex.php",
      "clonedf/19-open-redirect-url-fragment.php",
      "clonedf/2-ssrf-regex-bypass.py",
      "clonedf/20-sqli-login.js",
      "clonedf/21-xss-dom-postmessage.php",
      "clonedf/22-open-redirect-classic.php",
      "clonedf/23-bof-classic.c",
      "clonedf/24-sqli-column.php",
      "clonedf/25-xss-csp-bypass.php",
      "clonedf/26-idor-rest-api.py",
      "clonedf/26-pathTraversal-replace-limit.php",
      "clonedf/27-cache-poisoning-classic.py",
      "clonedf/28-business-logic-money-transfer.py",
      "clonedf/3-LFI-log-injection.php",
      "clonedf/30-deserialization-wakeup.php",
      "clonedf/31-LFI-to-rce.php",
      "clonedf/32-format-injection-classic.py",
      "clonedf/33-sqli-secound-order.php",
      "clonedf/34-DoS-regex.py",
      "clonedf/36-file-upload-unrestricted.php",
      "clonedf/37-ssrf-XFH-header.php",
      "clonedf/38-codeinjection-file-write.php",
      "clonedf/39-LFI-static-extension-php7.2.php",
      "clonedf/39-exploit_LFIStaticExtension.php7.2.py",
      "clonedf/39-exploit_LFIStaticExtension.php7.2_1.py",
      "clonedf/4-xss-script-tag.py",
      "clonedf/40-file-upload-extension-blacklist.php",
      "clonedf/41-command-injection-escapeshellcmd.php",
      "clonedf/41-idor-basic-role.py",
      "clonedf/42-command-injection-classic.py",
      "clonedf/42-ssti-classic-erb.rb",
      "clonedf/4242.json",
      "clonedf/5-broken-auth-spoof.go",
      "clonedf/6-ssti-classic.py",
      "clonedf/7-sqli-blind-variable-mixup.php",
      "clonedf/8-CSRF-change-email.php",
      "clonedf/9-open-redirect-invalid-regex.php",
      "clonedf/about.php",
      "clonedf/checkLogout.js",
      "clonedf/checkLogout_1.js",
      "clonedf/command-injection-saint_patrick.php",
      "clonedf/contact.php",
      "clonedf/customLog.py",
      "clonedf/db.js",
      "clonedf/db.php",
      "clonedf/db_1.php",
      "clonedf/db_2.php",
      "clonedf/db_3.php",
      "clonedf/db_4.php",
      "clonedf/design.php",
      "clonedf/design.py",
      "clonedf/design_1.php",
      "clonedf/design_1.py",
      "clonedf/design_10.php",
      "clonedf/design_10.py",
      "clonedf/design_11.php",
      "clonedf/design_12.php",
      "clonedf/design_13.php",
      "clonedf/design_14.php",
      "clonedf/design_15.php",
      "clonedf/design_16.php",
      "clonedf/design_17.php",
      "clonedf/design_18.php",
      "clonedf/design_19.php",
      "clonedf/design_2.php",
      "clonedf/design_2.py",
      "clonedf/design_20.php",
      "clonedf/design_21.php",
      "clonedf/design_22.php",
      "clonedf/design_23.php",
      "clonedf/design_24.php",
      "clonedf/design_3.php",
      "clonedf/design_3.py",
      "clonedf/design_4.php",
      "clonedf/design_4.py",
      "clonedf/design_5.php",
      "clonedf/design_5.py",
      "clonedf/design_6.php",
      "clonedf/design_6.py",
      "clonedf/design_7.php",
      "clonedf/design_7.py",
      "clonedf/design_8.php",
      "clonedf/design_8.py",
      "clonedf/design_9.php",
      "clonedf/design_9.py",
      "clonedf/home.php",
      "clonedf/index.js",
      "clonedf/items.json",
      "clonedf/items_1.json",
      "clonedf/package.json",
      "clonedf/package_1.json",
      "clonedf/package_2.json",
      "clonedf/package_3.json",
      "clonedf/payloadGen.py",
      "clonedf/pp-classic.js",
      "clonedf/snowflakes.js",
      "clonedf/users.json",
      "clonedf/xss-ethical-hackers-day.php",
      "clonedf/xss-string-outbreak.php",
      "clonedf/xss_classic_35.java"
    ]
  },
  "time": {
    "rules": [],
    "rules_parse_time": 7.718472957611084,
    "profiling_times": {
      "config_time": 15.448424816131592,
      "core_time": 10.2293381690979,
      "ignores_time": 0.0020644664764404297,
      "total_time": 25.680477142333984
    },
    "parsing_time": {
      "total_time": 0.2024998664855957,
      "per_file_time": {
        "mean": 0.0018409078771417786,
        "std_dev": 1.0464067399579495e-05
      },
      "very_slow_stats": {
        "time_ratio": 0.0,
        "count_ratio": 0.0
      },
      "very_slow_files": []
    },
    "scanning_time": {
      "total_time": 8.570271253585815,
      "per_file_time": {
        "mean": 0.02597051895026005,
        "std_dev": 0.007486036526325874
      },
      "very_slow_stats": {
        "time_ratio": 0.0,
        "count_ratio": 0.0
      },
      "very_slow_files": []
    },
    "matching_time": {
      "total_time": 3.0459117889404297,
      "per_file_and_rule_time": {
        "mean": 0.0013022282124584988,
        "std_dev": 6.352365222513054e-06
      },
      "very_slow_stats": {
        "time_ratio": 0.0,
        "count_ratio": 0.0
      },
      "very_slow_rules_on_files": []
    },
    "tainting_time": {
      "total_time": 0.700263500213623,
      "per_def_and_rule_time": {
        "mean": 0.00014982103128233267,
        "std_dev": 2.5624175249283763e-08
      },
      "very_slow_stats": {
        "time_ratio": 0.0,
        "count_ratio": 0.0
      },
      "very_slow_rules_on_defs": []
    },
    "targets": [],
    "total_bytes": 0,
    "max_memory_bytes": 8758954048
  },
  "engine_requested": "OSS",
  "interfile_languages_used": [],
  "skipped_rules": []
}